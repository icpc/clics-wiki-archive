This page describes a draft archivel format for a contest. It is developed in parallell with the REST API (and the JSON Event Feed. It might very well end up being very similar to the CDP which has been suggested to use for this, but which have a slightly different purpose...

== Introduction ==

There are several reasons that contest information will be stored on disk, including:
* As configuration used to initialize a CCS
* As an archive of what happened in a contest
* As an archive for replaying a contest, either for testing contest tools or for teams to compete against live data
* As a base for offline analysis

This standard lays out the relative location and format of each type of contest-related information when reading or writing to disk. The top level structure is based on the [[Contest API]] structure, and a dump of the output from that API is one way to store the data. That said, the archive format allows for any format whose documentation has been registered with the ICPC. The sections below lists all currently known (and thus accepted) formats.

== Structure ==

The Contest Archive consists of a single directory (possibly ZIP compressed) with a metadata file ('''archive.yaml''') and at most a single entry for each of the types of data ('''config''', '''problems''', '''registration''',  '''submissions''', '''judgements''', '''runs''', '''clarifications''', '''awards''', '''scoreboard''', '''events'''). An entry is either a directory with the same name as the type of data, or a file with same base name as the type of data and any file extension.

=== Metadata ===

Archive metadata is stored in a YAML file called '''archive.yaml''' with the following keys:

{| class="wikitable"
! Key !! Description
|-
| created-by || Name of system creating this archive
|-
| archive || ID of format used for content types not listed in archive.yaml
|-
| config || ID of format used for '''config'''
|-
| registration || ID of format used for '''registration'''
|-
| submissions || ID of format used for '''submissions'''
|- 
| judgements || ID of format used for '''judgements'''
|-
| runs || ID of format used for '''runs'''
|-
| clarifications || ID of format used for '''clarifications'''
|-
| awards || ID of format used for '''awards'''
|-
| scoreboard || ID of format used for '''scoreboard'''
|-
| events || ID of format used for '''events'''
|}

Only '''created-by''' is always required, but if any of content type is not listed then '''archive''' must be specified.

==== Example ====

 # Contest Archive
 ---
 created-by: Kattis
 archive:    contest-api
 problems:   kattis
 awards:	    missing

=== Config ===

Configuration data for the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Config_2
|}

=== Problems ===

Problems used at the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| kattis || Kattis problem package format  || http://www.problemarchive.org/ 
|-
| icpc || ICPC problem package format (subset of the Kattis format) || https://clics.ecs.baylor.edu/index.php/Problem_format
|}

=== Registration ===

Registration data for the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Registration_2
|}

=== Submissions ===

Submissions from the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Submissions_2
|}

=== Judgements ===

Judgements from the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Judgements_2
|}

=== Runs ===

Runs from the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Runs_2
|}

=== Clarifications ===

Clarifications from the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Clarifications_2
|}

=== Awards ===

A summary of awards handed out at the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Awards_2
|-
| missing || No awards data ||  
|}

=== Scoreboard ===

Final scoreboard from the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Scoreboard_2
|}

=== Events ===

List of events from the contest.

The following formats may be used:

{| class="wikitable"
! ID !! Description !! Specification
|-
| contest-api || Contest API dump  || https://clics.ecs.baylor.edu/index.php/Contest_Archive_Format#Events_2
|-
| missing || No awards data ||  
|}

== Contest API archive formats ==

'''NB!''': This section should not be in this document, and is only included here while WIP. It should either be it's own document, or be added to the [[Contest API]] document. Every subsection defines the on disk format '''contest-api''' for a type of data.

=== Config ===

A directory, '''config''', containing a JSON file for the /config endpoint as well as system.yaml defined in the [[Contest_Control_System_Requirements#system.yaml | CCSR]].

==== Example file listing ====

 config/config.json
 config/system.yaml

=== Registration ===

A directory, '''registration''', containing the following files and directories. The placeholders <organization-id>, <team-id> and <team-member-id> run over all IDs of its type:

;groups.json: Output from the [[Contest_API#Groups | groups endpoint]] after the contest.
;organizations/<organization-id>/organization.json: Output from the [[Contest_API#Organizations | organizations endpoint]] (/organizations/<organization-id>) after the contest.
;organizations/<organization-id>/logo.png:
;organizations/<organization-id>/logo.160px.png:
;organizations/<organization-id>/logo.56px.png:
;teams/<team-id>/team.json:
;teams/<team-id>/photo.{png, jpg}:
;teams/<team-id>/backup.zip:
;team-members/<team-member-id>/team-member.json: Output from the [[Contest_API#Team_Members | team members endpoint]] after the contest.
;team-members/<team-member-id>/photo.{png,jpg}:

=== Submissions ===

A directory, '''submissions''', containing a directory per submissions using the submission ID as the directory name. The submission directory contains the following files:

;submission.json: Output from the [[Contest_API#Submission | submission endpoint]] (/submissions/<id>) after the contest.
;files.zip: Source code for submission (corresponds to /submissions/<id>/files).
;reaction.*: Reaction video for submission (corresponds to /submissions/<id>/reaction) if available.

=== Judgements ===



=== Runs ===

=== Clarifications ===

=== Awards ===

=== Scoreboard ===

=== Events ===

== What is not covered ==

There are a few open design questions that have not been closed yet, including:
* Do config objects and events go in the same or separate folders?
* The location of event feed, scoreboard, and other files

== Types with file content ==

Types that have additional files (or are likely to have in the future) are stored in a folder per object, using the type name and id as the folder name:
 <type>/<id>/data.json
 <type>/<id>/<other files>

Data.json is a single JSON element containing one object, identical to the API call to baseurl/<type>/<id>. Types that follow this format are: organizations, teams, submissions, runs, and problems.

==== Example ====

The folder for a team with id 11 might look like the following:
 * teams/11/data.json
 * teams/11/photo.jpg
 * teams/11/backup.zip
 * teams/11/...

and data.json contains a single line of JSON:
 {"id":"11","icpc_id":"201433","name":"Shanghai Tigers","organization_id":"inst123","group_id":"asia-74324325532"}

== Types without file content ==

For types that are not likely to have additional files there is a simpler format on disk: a single <type>.json file containing the full list of objects. This file is identical to the API call to baseurl/<type>. Types that follow this format are: languages, groups, judgement types, judgements, clarifications, and awards.

==== Example ====

Contents of languages.json:
 [{"id":"1-java","name":"Java"},
   {"id":"cpp","name":"GNU C++"},
   {"id":"4358281971166881160","name":"Python"}]


===Augmented event stream===
The stream produced by the AutoAnalyst contains all tags produced by Kattis, but adds analystmsg tags to the stream. The stream will initially be provided as a file that is appended to as the competition proceeds, that can be read by other processes. Other means of interfacing can also be provided, for instance a TCP connection similar to the one provided by the Contest Control System.

Examples:
 <analystmsg>
 <id>24</id>
 <team>39</team>
 <time>67</time>
 <priority>0</priority>
 <problem>7</problem>
 <run_id>122</run_id>
 <submission>122</submission>
 <category>auto</category>
 <message>St. Petersburg State University of IT, Mechanics and Optics now leads the competition after solving G - Minimum Cost Flow. It has now solved 3 problems.</message>
 </analystmsg>

 <analystmsg>
 <id>15</id>
 <time>30</time>
 <priority>1</priority>
 <submission>-1</submission>
 <category>human</category>
 <message>K and D are promising to be the most popular problems on the first hour. Many teams are working on them at the moment.</message>
 </analystmsg>


id: Sequential identifier of this message. All notifications get a unique and strictly increasing id.<br>
team: Identifier of the team that triggered the event (typically by submitting a solution)<br>
time: Time in contest when this event occurred<br>
priority: Number indicating the priority of the message where 0 is the highest priority. For WF 2015 we will have:
          0 All very important messages
          1 Default priority human analyst messages
          2 High priority katalyzer messages
          3 Default priority katalyzer messages
problem: Problem that the message is relevant to<br>
run_id: Identifier of the submission that the message is related to, if any<br>
submission: Identifier of the submission that the message is related to, if any. If no submission then the value is -1.<br>
category: String describing the category of message such as 'human' or 'auto' depending on who produced the message<br>
message: Message from analyzer, in plain text

===Query interfaces===
These interfaces provide current information through http access. Content is sent using gzip compression, and the Content-Encoding http header will therefore always be set to gzip. Repetitive json documents compress very well, and all modern browsers handle the decompression transparently.

====HTTP GET /icat/api/Standings====
Returns a json-document describing the current state of the scoreboard. It contains the information usually present in a scoreboard, along with additional data on what the teams are working on and what rank teams would get when the next problem is solved. It is intended to be queried by ajax directly from the browser, but can of course also be fetched by a server process.

 { "scoreboard": [teamScore1, teamscore2, teamscore3, ...],
   "contestInfo": {
     "length": 300,
     "problems": [
        {"tag":"A","name":"A - Asteroid Rangers"},
        {"tag":"B","name":"B - Curvy Little Bottles"},
        {"tag":"C","name":"C - Bus Tour"},
           …
     ],
     "submissions": 1640
   }
 }

Sample teamscore structure
 { "rank":7,
   "team":{"id":56,"tag":"#t56","name":"Shanghai Jiao Tong University"},
   "nSolved":4,
   "totalTime":302,
   "mainLang":"Java",
   "problems":[
     {"id":"A","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"B","solved":true,"attempts":1,"time":20, "lang":"Java"},
     {"id":"C","solved":true,"attempts":1,"time":104, "lang":"Java"},
     {"id":"D","solved":true,"attempts":1,"time":66, "lang":"Java"},
     {"id":"E","solved":true,"attempts":1,"time":112, "lang":"Java"},
     {"id":"F","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"G","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"H","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"I","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"J","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"K","solved":false,"attempts":3,"time":0,"potential":{"rank":6}, "lang":"Java"},
     {"id":"L","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}}
   ]
 }


The ''potential'' field might need some extra explanation. If this field exists, it means that if the team solves this problem within the number of minutes specified by the ”before” field, the team would reach a particular ranking. Of course this is under the assumption that no other teams solves any problems meanwhile... If the ”before” field is missing, the team will become the slowest team to solve this number of problems anyways, which means that there is no specific limit, apart from the contest itself ending.

The "lang" field specifies, for each problem where the team has submitted a solution, which language the last submission for that problem was in. The "mainLang" field provides the language the teams uses, if the team consistently uses the same language. If the team has submitted solutions in several language, the field contains the string "Mixed".

The full standings document is returned regardless of whether the user wants to see all teams or just one. This simplifies caching. Furthermore, the footprint of the full document will still be quite small thanks to the compression.

====HTTP GET /icat/api/TeamNotifications/<teamid>====
Returns a json document containing all AutoAnalyst notifications relevant to this team, ordered chronologically. These are exactly the same notifications that have been published in the event stream, but made available in a query API and in json format.

 {"team": {"id":56,"tag":"#t56","name":"Shanghai Jiao Tong University"},
  "messages": [{
    "id": 79,
    "time": 20,
    "problem": 2, 
    "message": "Team Shanghai Jiao Tong University submitted solution for B - Curvy Little Bottles. If correct, they will get rank 5 (7)"
  },{ 
    "id": 80,
    "time": 20,
    "problem": 2, 
    "message": "Shanghai Jiao Tong University solves its first problem: B - Curvy Little Bottles"
  }]
 }

====HTTP GET /icat/api/EditActivity?from=FROM&to=TO====
Returns a json document containing all edit activities detected in the open interval <i>FROM</i>-<i>TO</i> (contest time in minutes) ordered chronologically in an array.

 EditActivity?from=80&to=85 could for example return
 [
  { "id": "213", "time": "80", 
    "team_id": "56", "problem_id": "A", 
    "language": "C++", "line_count": "49", "diff_line_count": "10", "file_size_bytes": "4277"
  },
  { "id": "214", "time": "84", 
    "team_id": "84", "problem_id": "B", 
    "language": "C++", "line_count": "23", "diff_line_count": "15", "file_size_bytes": "1547"
  }
  { "id": "215", "time": "85",
   "team_id": "56", "problem_id": "A",
   "language": "C++", "line_count": "55", "diff_line_count": "6", "file_size_bytes": "4444"
  }
 ]

====HTTP GET /icat/api/LastEditActivity?min=MIN====
Returns a json document containing all edit activities detected in the last <i>MIN</i> minutes ordered chronologically in an array.

 LastEditActivity?min=5 could for example return
 [
  { "id": "213", "time": "80", 
    "team_id": "56", "problem_id": "A", 
    "language": "C++", "line_count": "49", "diff_line_count": "10", "file_size_bytes": "4277"
  },
  { "id": "214", "time": "84", 
    "team_id": "84", "problem_id": "B", 
    "language": "C++", "line_count": "23", "diff_line_count": "15", "file_size_bytes": "1547"
  }
  { "id": "215", "time": "85",
   "team_id": "56", "problem_id": "A",
   "language": "C++", "line_count": "55", "diff_line_count": "6", "file_size_bytes": "4444"
  }
 ]

====HTTP GET /icat/api/CodeActivity?team_id=<tid1,tid2,...>&problem_id=<pid1,pid2,...>&granularity=MIN====
Returns a JSON document with a summary of edit and submission activity, intended for generating a graph showing which problems the teams are spending their time on. A few minutes into the contest, a possible response could be

 { "granularity": 5,
   "problems": [
     { "problem_id": "F",
       "edit_summary": [
         { "contest_time": 0, "num_edited_lines": 2 },
         { "contest_time": 5, "num_edited_lines": 4 }
       ],
       "submissions": {
         "AC": [
           { "contest_time": 8, "team_id": 47, "lang_id": "C++", "submission_id": "6" },
           { "contest_time": 9, "team_id": 71, "lang_id": "C++", "submission_id": "12" }
         ],
         "WA": [
           { "contest_time": 9, "team_id": 71, "lang_id": "C++", "submission_id": "7" }
         ]
       }
     }
   ]
 }

All arguments are optional. <code>"granularity"</code> is important to note when interpreting the edit summary, since it describes the length of the "bins" in the edit summary. In the example, there are two edits between minutes 0 and 5, and four edits between minutes 5 and 10. A granularity of 1 would have meant two edits between 0 and 1, and four edits between 5 and 6.

====HTTP GET /icat/api/LastEditedNotSolvedProblem?team_id=<teamid>====
Returns a JSON document with the problem a team worked on last, along with the contest time when the problem was last edited. The time of submission is not regarded as an edit in this context, and as soon as a submission has been accepted that problem is excluded altogether. This might mean that a problem that was edited prior to the last one might be returned, and hence it's important to take how <tt>"last_edit_time"</tt> compares to the current contest time into account when deciding on the relevance of the information.

 { "team_id": 29,
   "problem_id": [
     "E"
   ],
   "last_edit_time": 155
 }

A <tt>team_id</tt> query parameter needs to be provided, and only one integer is accepted. If no ''unsolved'' problem has been edited yet, the <tt>"problem_id"</tt> array is empty and <tt>"last_edit_time"</tt> set to <tt>null</tt>. In the case where more than one problem was edited during the same minute, all of these problems will be listed in alphabetical order in the <tt>"problem_id"</tt> array.

Note that only submissions accepted up until scoreboard freeze will be removed from the result. For example, if a team (regardless of the contest time) last edited problem A, then this endpoint will return A as the last edited problem if and only if the team did not solve problem A before scoreboard freeze. After freeze, the endpoint will keep saying that they edited problem A until the teams starts to work on another problem that was not already solved before the freeze.


===Augmented event stream===
The stream produced by the AutoAnalyst contains all tags produced by Kattis, but adds analystmsg tags to the stream. The stream will initially be provided as a file that is appended to as the competition proceeds, that can be read by other processes. Other means of interfacing can also be provided, for instance a TCP connection similar to the one provided by the Contest Control System.

Example:
 <analystmsg>
 <id>24</id>
 <team>39</team>
 <problem>7</problem>
 <time>118.480356991</time>
 <message>St. Petersburg State University of IT, Mechanics and Optics extends its lead by solving G - Minimum Cost Flow. It has now solved 8 problems</message>
 </analystmsg>

id: Sequential identifier of this message. All notifications get a unique and strictly increasing id.
team: Identifier of the team that triggered the event (typically by submitting a solution)
problem: Problem that the message is relevant to
time: Time in contest when this event occurred
message: Message from analyzer, in plain text

Changes for WF2015: Add three fields ''priority'', a number indicating the priority of the message where 1 is the highest priority, ''type'', a string either human or auto depending on who produced the message, and ''submission'', an identifier of the submission that the message is related to, if any. If no submission then the value is -1.

Question: How is the time stamp generated?

===Query interfaces===
These interfaces provide current information through http access. Content is sent using gzip compression, and the Content-Encoding http header will therefore always be set to gzip. Repetitive json documents compress very well, and all modern browsers handle the decompression transparently.

====HTTP GET /Standings====
Returns a json-document describing the current state of the scoreboard. It contains the information usually present in a scoreboard, along with additional data on what the teams are working on and what rank teams would get when the next problem is solved. It is intended to be queried by ajax directly from the browser, but can of course also be fetched by a server process.

 { "scoreboard": [teamScore1, teamscore2, teamscore3, ...],
   "contestInfo": {
     "length": 300,
     "problems": [
        {"tag":"A","name":"A - Asteroid Rangers"},
        {"tag":"B","name":"B - Curvy Little Bottles"},
        {"tag":"C","name":"C - Bus Tour"},
           …
     ],
     "submissions": 1640
   }
 }

Sample teamscore structure
 { "rank":7,
   "team":{"id":56,"tag":"#t56","name":"Shanghai Jiao Tong University"},
   "nSolved":4,
   "totalTime":302,
   "mainLang":"Java",
   "problems":[
     {"id":"A","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"B","solved":true,"attempts":1,"time":20, "lang":"Java"},
     {"id":"C","solved":true,"attempts":1,"time":104, "lang":"Java"},
     {"id":"D","solved":true,"attempts":1,"time":66, "lang":"Java"},
     {"id":"E","solved":true,"attempts":1,"time":112, "lang":"Java"},
     {"id":"F","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"G","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"H","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"I","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"J","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}},
     {"id":"K","solved":false,"attempts":3,"time":0,"potential":{"rank":6}, "lang":"Java"},
     {"id":"L","solved":false,"attempts":0,"time":0,"potential":{"rank":4,"before":5}}
   ]
 }


The ''potential'' field might need some extra explanation. If this field exists, it means that if the team solves this problem within the number of minutes specified by the ”before” field, the team would reach a particular ranking. Of course this is under the assumption that no other teams solves any problems meanwhile... If the ”before” field is missing, the team will become the slowest team to solve this number of problems anyways, which means that there is no specific limit, apart from the contest itself ending.

The "lang" field specifies, for each problem where the team has submitted a solution, which language the last submission for that problem was in. The "mainLang" field provides the language the teams uses, if the team consistently uses the same language. If the team has submitted solutions in several language, the field contains the string "Mixed".

The full standings document is returned regardless of whether the user wants to see all teams or just one. This simplifies caching. Furthermore, the footprint of the full document will still be quite small thanks to the compression.

====HTTP GET /TeamNotifications/<teamid>====
Returns a json document containing all AutoAnalyst notifications relevant to this team, ordered chronologically. These are exactly the same notifications that have been published in the event stream, but made available in a query API and in json format.

 {"team": {"id":56,"tag":"#t56","name":"Shanghai Jiao Tong University"},
  "messages": [{
    "id": 79,
    "time": 20,
    "problem": 2, 
    "message": "Team Shanghai Jiao Tong University submitted solution for B - Curvy Little Bottles. If correct, they will get rank 5 (7)"
  },{ 
    "id": 80,
    "time": 20,
    "problem": 2, 
    "message": "Shanghai Jiao Tong University solves its first problem: B - Curvy Little Bottles"
  }]
 }

====HTTP GET /EditActivity?from=FROM&to=TO====
Returns a json document containing all edit activities detected in the open interval <i>FROM</i>-<i>TO</i> (contest time in minutes) ordered chronologically in an array.

 EditActivity?from=80&to=85 could for example return
 [
  { "id": "213", "time": "80", 
    "team_id": "56", "problem_id": "A", 
    "language": "C++", "line_count": "49", "diff_line_count": "10", "file_size_bytes": "4277"
  },
  { "id": "214", "time": "84", 
    "team_id": "84", "problem_id": "B", 
    "language": "C++", "line_count": "23", "diff_line_count": "15", "file_size_bytes": "1547"
  }
  { "id": "215", "time": "85",
   "team_id": "56", "problem_id": "A",
   "language": "C++", "line_count": "55", "diff_line_count": "6", "file_size_bytes": "4444"
  }
 ]

====HTTP GET /LastEditActivity?min=MIN====
Returns a json document containing all edit activities detected in the last <i>MIN</i> minutes ordered chronologically in an array.

 LastEditActivity?min=5 could for example return
 [
  { "id": "213", "time": "80", 
    "team_id": "56", "problem_id": "A", 
    "language": "C++", "line_count": "49", "diff_line_count": "10", "file_size_bytes": "4277"
  },
  { "id": "214", "time": "84", 
    "team_id": "84", "problem_id": "B", 
    "language": "C++", "line_count": "23", "diff_line_count": "15", "file_size_bytes": "1547"
  }
  { "id": "215", "time": "85",
   "team_id": "56", "problem_id": "A",
   "language": "C++", "line_count": "55", "diff_line_count": "6", "file_size_bytes": "4444"
  }
 ]

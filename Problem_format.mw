All files related to a given problem lie in one directory and its
subdirectories. The name of the directory is also the short-name or
identifier for the problem.

=== Directory structure ===

 <short_name>/
       problem.yaml - problem configuration file
       problem_statement/
               problem.tex - problem statement
               - any files that description.tex needs to include, e.g. images
       data/
               sample/
                       *.in - sample input files
                       *.ans - sample answer files
               secret/
                       *.in - input files
                       *.ans - answer files
                       *.txt - optional data file description
       test_submissions/
               accepted/
                       - single file or directory per solution
               wrong_answer/
                       - single file or directory per solution
               time_limit_exceeded/
                       - single file or directory per solution
               run_time_error/
                       - single file or directory per solution
       input_validators/
               - single file or directory per validator
       output_validators/
               - single file or directory per validator

=== Sample Directory / Filenames ===

This is a sample list of directories/files for a problem named ''squares''

 squares/problem.cfg
 squares/problem_statement/problem.tex
 squares/data/sample/squares_sample1.in 
 squares/data/sample/squares_sample1.ans
 squares/data/sample/squares_sample2.in 
 squares/data/sample/squares_sample2.ans
 squares/data/secret/squares1.in 
 squares/data/secret/squares1.ans
 squares/data/secret/squares1.txt
 squares/data/secret/squares2_cornercases.in 
 squares/data/secret/squares2_cornercases.ans
 squares/data/secret/squares3_bigcases.in
 squares/data/secret/squares3_bigcases.ans
 squares/test_submissions/accepted/squares.cpp
 squares/test_submissions/wrong_answer/wrong.cpp
 squares/test_submissions/time_limit_exceeded/tle.c
 squares/test_submissions/run_time_error/rte.c
 squares/input_validators/validator1
 squares/output_validators/ovalidator1

=== problem.yaml ===

A YAML file consisting of a mapping with the following keys:

'''Comment:''' what's the point of the short_name in the .cfg file and how is it different from the <short-name> that is the name of the base directory for the problem? [[User:Austrin|Austrin]] 03:24, 17 February 2011 (CET)

{| class="wikitable"
! Key !! Comments !! Example
|-
| name || mandatory || Hello World
|-
| short_name || mandatory || hello
|-
| source || mandatory || ICPC World Finals 2011
|-
| author || optional, defaults to "Unknown"  ||
|-
| license || optional, defaults to "cc by-sa"  ||
|-
| rights_owner || mandatory || ICPC
|-
| time_limit_multiplier || optional, defaults to 5 ||5
|-
| time_limit_safety_margin || optional, defaults to 10||10
|-
| memory_limit || optional, defaults to 2GB ||3G
|-
| output_limit || optional, defaults to 8MB ||4M
|-
| validator 
| set of values from the following (delimited by spaces):<br>
"case_sensitive" - upper/lower case differences are significant.  If this parameter is not specified, any changes in case are to be ignored.<br>
"space_change_sensitive" - whitespace differences are significant.  If this parameter is not specified, any non-zero amounts of whitespace are considered identical.<br>
"float_relative_tolerance X" - accepts token if it is a floating point number and the relative error is <= X<br>
"float_absolute_tolerance X" - accepts token if it is a floating point number and the absolute error is <= X<br>
"float_tolerance X" - accepts token if either "float_relative_tolerance X" or "float_absolute_tolerance X" would accept<br>
"custom" - use a custom output validator. Must be first value, values following will be given as command-line arguments to validator<br>
|
|}

===Sample problem.yaml===
 
 # Problem configuration
 name: Squares to Circles
 short_name: squares
 source: ICPC Mid-Atlantic Regional Contest
 author: Judge X
 # license  optional, defaults to "cc by-sa"  
 rights_owner: ICPC
 time_limit_multiplier: 5
 time_limit_safety-margin: 10
 # memory_limit  optional, defaults to 2GB  
 # output_limit  optional, defaults to 8MB  
 validator: space_change_sensitive float_absolute_tolerance 0.001
 # validator = custom --limits 3,8,44 --haltfirst

=== <short_name>/problem_statement/problem.tex ===

Latex file that only includes the problem text itself, including input
and output specifications, but not sample input and output. A template
will be provided that \imports this file as well as the sample input
and output. Files needed by this file must all be in
<problem>/problem_statement/ , problem.tex should include auxiliary files as if
working directory is <problem>/problem_statement/ .

:'''Comment:''' Are other format acceptable? Ex. .txt, .html, .pdf or .odt ? [[User:Douglas Lane|Douglas Lane]] 17:32, 17 February 2011 (CET)

=== <short_name>/data/*/* ===

All input and answer files must have the filename extension .in and
.ans respectively. Optionally a text file describing the purpose of an
input file may be present. Input, answer and description files are
matched by the base name.

=== <short_name>/test_submissions/*/ ===

Every file or directory in these directories represent a separate
solution. Same requirements as for submissions with regards to
filenames. subdirectories that would be empty can be left out.

=== <short_name>/*_validators/ ===

Every file or directory in these directories represent a separate
validator. A validator in the form of a directory may include a
makefile, if so it will be used. If not, the validator will be
compiled as if it was a solution. Input and output validators must
adhere to the input and output validator standard respectively.

:'''Comment:''' When a makefile is present, is there a naming standard for validators? for solutions? [[User:Douglas Lane|Douglas Lane]] 07:26, 20 February 2011 (CET)

:'''Comment:''' Can the validator be an executable or a shell/perl/etc. script ? [[User:Douglas Lane|Douglas Lane]] 20:44, 16 February 2011 (CET)

=== Verification ===

Solutions or validators in languages that is not supported by the CCS
should be ignored and a warning to that effect shown.

 Warn if:
       there is no problem.tex
       there are no *.in in data/sample/

 Error if:
       there is no problem.cfg
       any value in problem.cfg is invalid
       there are no *.in in data/secret/
       there are .in files without corresponding .ans files in data/*/
       there are no solutions in test_submissions/accepted/
       there are no validators in input_validators/
       validator begins with "custom" and there are no validators in output_validators/

 For each *.in in public_data and judge_data:
       For each validator in input_validators/:
               If the validator does not accept the input file: Error!

 For each solution in test_submissions/accepted/:
       For each *.in in data/*/:
               Run the solution on the input
               For the built-in validator if corrector is "diff" or each validator in output_validators/:
                       If the validator does not accept the output of the solution: Error!
 Let t be the longest time any of the solutions ran on any of the inputs.

 For each solution in test_submissions/time_limit_exceeded/:
       For each *.in in data/*/:
               Run the solution on the input for at least t * time_limit_safety_margin seconds.
 Let t_slow be the shortest time any of the solutions ran on any of the inputs.

 If t_slow is less than t * time_limit_safety_margin: Error!

 The execution time limit should be at least t * time_limit_multiplier and at most 1 second more.

 For each solution in test_submissions/wrong_answer/:
       For each *.in in data/*/:
               Run the solution on the input
               For the built-in validator if corrector = "diff" or each validator in output_validators/:
                       If the validator accepts the output of the solution: Error!

 For each solution in test_submissions/run_time_error/:
       For each *.in in data/*/:
               Run the solution on the input
               If the solution is not judged Run-Time Error: Error!

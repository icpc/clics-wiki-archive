This page describes a draft for a JSON event feed.

== Getting the feed ==

The event feed is served over HTTPS at the `/event-feed` endpoint.

Access control uses the same [[Draft_CCS_REST_interface#Roles | user roles]] as defined for the REST API.

== Feed format ==

The feed is served as [http://specs.okfnlabs.org/ndjson/ Newline delimited JSON], with every event as it's own JSON object.

The general format for events is:
 {"event": "<event type>", "endpoint": "<API endpoint>", "timestamp": "<timestamp>", "data": { <event data> }}

Most events has a corresponding [[Draft_CCS_REST_interface | REST interface]] endpoint. The "data" key will, when available, contain exactly what would be returned when calling the corresponding REST endpoint.

== Restarting the feed ==

When a client (re)connects to the feed, possibly after the start of the contest, he will receive all events with identical data, except for past events corresponding to so-called 'static elements', which are those from the [[Draft_CCS_REST_interface|REST interface]] that do not have a "time" and "contest_time" attribute.

'''TODO''': we need to think better about this:
* static objects are the ones that ''actually'' do get modified, while the others never do after creation, except for "submission_judgement" since it needs to be created before any dependent "test_case_judgement" elements. Also the "has time and contest_time attributes" does not exactly specify non-static elements, since "submission_file" has no time associated to it (that would be the submission time).

== Events ==

=== Contest ===

Note: since the contest endpoint returns an empty object when no current contest is running, an event will be sent at contest start and end. 

Example:
 {"event": "contest", "endpoint": "/contest", "timestamp": "2014-06-25T10:00:00+01", "data": {
   {"id":"7b0dd4ea-19a1-4434-9034-529ebe55ab45","name":"2014 ICPC World Finals",
   "formal_name":"38th Annual World Finals of the ACM International Collegiate Programming Contest",
   "start_time":"2014-06-25T10:00:00+01","duration":"5:00:00","scoreboard_freeze_duration":"1:00:00","penalty_time":20}
 }

=== Languages ===

Example:
 {"event": "languages", "endpoint": "/languages", "timestamp": "2014-06-25T10:00:00+01", "data": [{"id":"1-java","name":"Java"},
  {"id":"cpp","name":"GNU C++"},
  {"id":"4358281971166881160","name":"Python"}
 ]}

=== Problems ===

==== Examples ====
Initial set up:
 {"event": "problems", "endpoint": "/problems", "timestamp": "2014-06-25T10:00:00+01", "data": [
  {"id":"10-asteroids","label":"A","shortname":"asteroids","name":"Asteroid Rangers","ordinal":1,"color":"blue","rgb":"#00f"},
  {"id":"B","label":"B","shortname":"bottles","name":"Curvy Little Bottles","ordinal":2,"color":"gray","rgb":"#808080"}
 ]}
Problem added:
 {"event": "problems", "endpoint": "/problems/circles", "timestamp": "2014-06-25T10:00:00+01", "data": 
  {"id":"circles","label":"C","shortname":"circles","name":"Circles","ordinal":3,"color":"red","rgb":"#f00"}
 }
Problem updated:
 {"event": "problems", "endpoint": "/problems/10-asteroids", "timestamp": "2014-06-25T10:00:00+01", "data": 
  {"id":"10-asteroids","label":"A","shortname":"asteroids","name":"Asteroid Rangers","ordinal":1,"color":"orange","rgb":"#f0b034"}
 }
Problem deleted:
 {"event": "problems", "endpoint": "/problems/circles", "timestamp": "2014-06-25T10:00:00+01", "data": null}

=== Test cases ===

Example:
 {"event": "test-cases", "endpoint": "/problems/10-asteroids/test_cases", "timestamp": "2014-06-25T10:00:00+01", "data": [{"id":"10-asteroids-28","problem_id":"10-asteroids","ordinal":28,"description":"Test corner case of zero input",
   "sample":false,"input":"<base64_string>","answer":"<base64_string>"}
 ]}

=== Teams ===

Example:
 {"event": "teams", "endpoint": "/teams", "timestamp": "2014-06-25T10:00:00+01", "data": [{"id":"abc123","label":"123","icpc_id":"201433","name":"Shanghai Tigers","institution_id":"inst123"},
  {"id":"11","label":"11","name":"CMU1","institution_id":"inst105"}
 ]}

=== ... ===

...

=== Heartbeat ===

The event feed is guaranteed to send some data at least every 120 seconds. If no other event is sent, a heartbeat will be.

The heartbeat event does *not* have a corresponding API endpoint, so the endpoint and data keys are missing.

Example:
 {"event": "heartbeat", "timestamp": "2014-06-25T10:00:00+01"}

This page describes a draft for a JSON event feed.

== Getting the feed ==

The event feed is served over HTTPS at the `/event-feed` endpoint.

Access control uses the same [[Draft_CCS_REST_interface#Roles | user roles]] as defined for the REST API.

=== Feed options ===

==== Filtering events ====

If a client only wants some events the feed can be filtered with the "events" URL argument:

 /event-feed?events=submissions,teams

If not specified all events will be sent. If specified only the listed events will be sent.

==== Notification only ====

If a client does not want the "data" part of events this can be removed with the "notification-only" URL argument:

 /event-feed?notification-only=submissions,teams

If not specified all events will include data. If specified the listed events will not include data but all others will.

If an event is left out of "events" but included in "notification-only" it will not be sent (and not include data) as expected.

==== Feed starting point ====

If a client wants data from some point in time this can be done with the "timestamp" URL argument:

 /event-feed?timestamp=2014-06-25T11%3A22%3A05.034%2B01

If specified the event feed will include all events strictly ''after'' the specified timestamp. If not specified the event feed will include all events from the beginning of the feed.

Timestamps in the future are allowed.

Timestamps are given as  [https://en.wikipedia.org/wiki/ISO_8601 ISO 8601] extended combined date/time format with timezone: <tt>yyyy-mm-ddThh:mm:ss(.uuu)?[+-]zz(:mm)?</tt> (or timezone <tt>Z</tt> for UTC). Specifically, they are given in the same format as the '''timestamp'''s in the feed. This means that if a client copies the timestamp of an event and uses that for the timestamp URL argument it will get all events after that event. This is useful e.g. if a client is disconnected and want to continue where it left off.

== Feed format ==

The feed is served as [http://specs.okfnlabs.org/ndjson/ Newline delimited JSON], with every event as it's own JSON object.

The general format for events is:
 {"event": "<event type>", "id": "<id>, "endpoint": "<API endpoint>", "timestamp": "<timestamp>", "data": { <event data> }}

{| class="wikitable"
|-
! Name
! Description
! Comment
|-
| event
| Name of the event
| Used for filtering. All event types are described below 
|-
| id
| ID for the object that's being updated. 
| Always present if event relates to element, never present if event relates to collection.
|-
| endpoint
| URL for corresponding API endpoint
|
|-
| timestamp
| Time for the event
| Some events will have internal timestamp in the data section. This timestamp might not agree with that timestamp. The semantics of this timestamp is simply when the event was sent on the feed. 
|-
| data
| Data for the event
| The exact data that would be returned if calling the corresponding API endpoint (given) at this time.
|}

Events are guaranteed to come in timestamp order and timestamps are guaranteed to be unique. (Note though that this only applies to the event feed timestamp. Some events might have timestamps inside the "data" value, those might be different and specifically out of order).

Every event with a corresponding API endpoint maps to either a collection or an element in a collection. (The '''contest''' event is a special case. It could be argued that it is an element, and in any case it is treated as an element). When an event is sent as an element, that can either be an insert (if the ID given has not been seen before, update (if the ID has been seen before) or delete (if the ID has been seen before but the data element is "null". When an event is sent as a collection is is always a complete replace of the previous state. E.g. if we have already seen IDs A and B and are sent a collection with IDs A and C that means that B is deleted, C is added and A is potentially updated (depending on whether the new value for A given is different or not). Note that in this case elements that are not changed at all must still be included with no change.

== Events ==

=== Contest ===

Example:
 {"event": "contest", "endpoint": "/contest", "timestamp": "2014-06-25T10:00:00+01", "data":
   {"id":"7b0dd4ea-19a1-4434-9034-529ebe55ab45","name":"2014 ICPC World Finals",
   "formal_name":"38th Annual World Finals of the ACM International Collegiate Programming Contest",
   "start_time":"2014-06-25T10:00:00+01","duration":"5:00:00","scoreboard_freeze_duration":"1:00:00","penalty_time":20}
 }

=== Languages ===

Example:
 {"event": "languages", "endpoint": "/languages", "timestamp": "2014-06-25T10:00:00+01", "data": [{"id":"1-java","name":"Java"},
  {"id":"cpp","name":"GNU C++"},
  {"id":"4358281971166881160","name":"Python"}
 ]}

=== Problems ===

==== Examples ====
Initial set up:
 {"event": "problems", "endpoint": "/problems", "timestamp": "2014-06-25T10:00:00+01", "data": [
  {"id":"10-asteroids","label":"A","shortname":"asteroids","name":"Asteroid Rangers","ordinal":1,"color":"blue","rgb":"#00f"},
  {"id":"B","label":"B","shortname":"bottles","name":"Curvy Little Bottles","ordinal":2,"color":"gray","rgb":"#808080"}
 ]}
Problem added:
 {"event": "problems", "endpoint": "/problems", "id": "circles", "timestamp": "2014-06-25T10:00:00+01", "data": 
  {"id":"circles","label":"C","shortname":"circles","name":"Circles","ordinal":3,"color":"red","rgb":"#f00"}
 }
Problem updated:
 {"event": "problems", "endpoint": "/problems", "id": "10-asteroids", "timestamp": "2014-06-25T10:00:00+01", "data": 
  {"id":"10-asteroids","label":"A","shortname":"asteroids","name":"Asteroid Rangers","ordinal":1,"color":"orange","rgb":"#f0b034"}
 }
Problem deleted:
 {"event": "problems", "endpoint": "/problems", "id": "circles", "timestamp": "2014-06-25T10:00:00+01", "data": null}

=== Test cases ===

Example:
 {"event": "test-cases", "endpoint": "/problems/10-asteroids/test_cases", "timestamp": "2014-06-25T10:00:00+01", "data": [{"id":"10-asteroids-28","problem_id":"10-asteroids","ordinal":28,"description":"Test corner case of zero input",
   "sample":false,"input":"<base64_string>","answer":"<base64_string>"}
 ]}

=== Teams ===

Example:
 {"event": "teams", "endpoint": "/teams", "timestamp": "2014-06-25T10:00:00+01", "data": [{"id":"abc123","label":"123","icpc_id":"201433","name":"Shanghai Tigers","institution_id":"inst123"},
  {"id":"11","label":"11","name":"CMU1","institution_id":"inst105"}
 ]}

=== ... ===

...

=== Heartbeat ===

The event feed is guaranteed to send some data at least every 120 seconds. If no other event is sent, a heartbeat will be.

The heartbeat event does *not* have a corresponding API endpoint, so the endpoint and data keys are missing.

Example:
 {"event": "heartbeat", "timestamp": "2014-06-25T10:00:00+01"}

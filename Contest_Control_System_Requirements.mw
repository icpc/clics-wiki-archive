'''Specification/Document Status''': This document is currently a work in progress (''draft'') specification.
To learn more about this document's status/schedule contact the primary authors.
 
This document specifies a standard for operation, verification and validation
of Programming Contest Control Systems that wish to be considered for managing
the operation of the [http://icpc.baylor.edu ACM International Collegiate Programming Contest]
[http://cm.baylor.edu/ICPCWiki/Wiki.jsp?page=World%20Finals World Finals]. 
The document defines a set of operations, capabilities, and features which
any candidate system must provide, including a set of testability criteria which must
be satisfied and a set of documentation which must be provided.

The primary authors of the document are John Clevenger and Fredrik Niemelä,
acting under the auspices of the [[Competitive Learning Institute (CLI)]].


== Introduction ==

=== Overview === 

For purposes of this standard, the term contest control system (CCS) means
software which automatically manages the operation of a programming contest.
Operations to be managed by the CCS include but are not necessarily limited to:
run submissions by teams, judging of submissions, handling clarification
requests from teams and clarification responses from judges, calculation of
standings according to a specified algorithm, generating external representations
of contest results, and overall CCS configuration by
appropriate contest administrative personnel.

Every operation or specification identified in this standard using the words "shall" or
"must" is required; any system not meeting that requirement will not be
considered as a candidate for running the World Finals (WF).

Use of the word "should" in regard to an operation or specification in this standard means
that the operation or specification is optional, in the sense that failure to meet or provide
the specification or operation will not automatically disqualify a CCS from being considered as
a candidate for running the World Finals. Note however that use of the word "should" identifies 
an operation or specification that is ''desirable'' and ''preferred'' for running the World Finals; 
see [[#Certification Process| Certification Process]] for information regarding criteria used for choosing the actual CCS to be used for
running a given World Finals.

A contest control system (CCS) may be submitted to the Director of
Operations for the ICPC World Finals for consideration as a candidate to run the
World Finals. The items which must be submitted in order to be considered are
described under [[#Certification Process| Certification Process]] in this standard. Any submitted CCS
which meets all of the requirements defined in this standard will be certified as being
accepted as a candidate to run the World Finals. A CCS which fails to meet any
one, or more, of the requirements listed in this document will be rejected and will not
be considered as a candidate for running the World Finals. Meeting or failing to
meet each requirement will be determined by a test specified by the Director of
Operations and/or his/her designee.

The choice of the CCS actually used to run the World Finals each year will be
made by the Director of Operations from among those CCS’s which have been
accepted as candidates prior to the acceptance deadline.  Significant weight will be
given to those accepted candidates which also implement a large number of those operations
and specifications identified as optional (by the use of the word "should") in the standard.

=== Rationale ===

This standard is intended to specify functional requirements, not
implementation requirements. Nothing in this standard should be construed as
requiring any particular implementation architecture or use of any particular
implementation language or languages. For example, a CCS might be implemented
as a set of stand-alone applications using a client-server architecture, or might
equally well be implemented as a set of scripts, web pages, and/or other facilities.

This standard is not intended to act as a specification for what constitutes
“best practices” in a Contest Control System; rather, it acts solely as a specification
of what functionality is required to be a candidate for running the ICPC World Finals.
As such, there may be functions listed in this standard which are specific solely to
the ICPC World Finals but might not be required for running other contests; a
candidate CCS must meet the requirements for these functions.

Likewise, there may be functionality which a CCS provides to meet the
requirements of some other contest; such additional functionality will not disqualify
the CCS from qualifying as a candidate to run the ICPC World Finals provided the
CCS meets all the requirements listed in this standard.

== General Requirements ==

=== Advance Configuration ===

:All variable aspects of the CCS must be configurable prior to the start of a World Finals contest. That is, the CCS may not require that any changes be made to the CCS configuration once the contest has started. Note that this does not alter any requirements which state that the CCS must allow certain configuration changes to be able to be made after the contest starts; it means that the contest administration personnel shall not be required to make any changes once the contest starts.

=== No outside contact ===

:The CCS must be able to run at the world finals site with no contact to anything outside the contest network.

=== Licensing ===

:The CCS must either be freely useable, or must be accompanied by a license granting to the ACM-ICPC the non-exclusive, non-revocable, non-transferable rights of use of the CCS both for purposes of evaluation and testing and for actual use in the ICPC World Finals for at least the two years following the submission. The CCS may not require obtaining any third-party license in order to be used by the ACM-ICPC.

=== Platform ===

:The CCS must run on the computer platform set aside for the CCS at the World Finals and posted at the ICPC web site. Normally this will consist of 10+2 machines identical to the team machines and 2 servers.

=== Data Persistency ===

==== Contest Configuration Persistency ====

:The CCS must support persistence of the contest configuration. This means that following a shutdown of the CCS, or a power failure on the machine(s) on which the CCS runs, it must be possible to automatically restore the configuration information already entered into the CCS without the necessity of reentering that configuration data.

==== Contest State Persistency ====

:The CCS must also support persistence of the contest state once the contest has been started. This means that following a shutdown of the CCS, or a power failure on the machine(s) on which the CCS runs, it must be possible to automatically restore the contest state to what it was prior to the shutdown or power failure. The contest state for purposes of this requirement includes all data regarding submitted runs, submitted clarification requests, answers to clarification requests, run judgments, and similar data defining and/or affecting the standings of the contest.

=== Secure Authentication ===

:'''Comment:''' This section needs to be reworded to fit here. It should apply to admins and judges as well as teams.[[User:Niemela|Fredrik Niemelä]] 19:07, 28 January 2011 (CET)

==== Authentication Mechanism ====

:The CCS must support a secure authentication mechanism for each registered team to gain access to the contest, and must enforce the rule that only teams who supply correct authentication credentials may invoke contest-related functions.

:Further, the CCS must support a secure mechanism which insures that teams may only invoke functions corresponding to their authentication credentials. (In other words, it must not be possible for a team connected with authentication credentials for a given team to invoke functions as if they were some other team, such as submitting a run on behalf of some other team).

==== Creation of Authentication Data ====

: If the CCS uses a login/password mechanism, it should generate login/password information for all teams when the team information is imported. It should also output the complete list of username/password pairs in a file using the [[#userdata.tsv]] format.

==== Changes To Authentication Data ====

:The CCS must allow team authentication credential information to be changed dynamically by contest administration personnel during a contest without the necessity of stopping the contest.

==== Logging Out ====

:The CCS must support a mechanism for each team to disconnect (remove previously-supplied authentication credentials) from the contest, with the effect that no other user of the computer system not possessing that team’s authentication credentials will be able to invoke CCS functions as if they did possess those credentials.

==== Underlying Implementation ====

:The CCS may optionally rely on the underlying operating system account login/password mechanism for purposes of meeting the requirements of this section, provided that it is the case that the CCS enforces all of the requirements of this section, including but not limited to the requirement that teams not be allowed to invoke functions as if they were some team other than that specified by their login credentials.

== Contest Configuration ==

=== Team Registration ===

==== Initialization File Loading ====

:The CCS must be able to read an ICPC Contest Management System (CMS)-generated initialization file containing a list of teams registered for the World Finals, and use the data in this file to create automatically whatever internal representation is necessary to allow each team (and only the teams) specified in the registration list to participate in the World Finals contest.  The format and content of the CMS-generated initialization file is given in the [[#Appendix:_File_formats| Appendix]].

=== Clarification Default Answer ===

:The CCS must provide the ability to configure a "default answer" (e.g., "No response, read problem statement.") to clarification requests, so that human judges can choose to reply to a clarification request by selecting the default answer rather than being required to enter a specific answer.

=== Programming Languages ===

==== Supported Languages ====

:The CCS must provide the ability to compile and execute (or interpret, as appropriate for the language) submitted source code files for each of the languages specified by the [http://cm.baylor.edu/ICPCWiki/Wiki.jsp?page=Programming%20Environment Programming Environment of the World Finals].

==== Language Options ====

:For each supported language compiler or interpreter it must be possible to configure the CCS to invoke it with any of the options specified in the compiler or interpreter's documentation.

=== Contest Problems ===

==== Separate Configuration ====

:The CCS must provide the ability to configure each of the contest problems separately. This means that all aspects of the description of a contest problem – for example the title, input data specification, runtime limit, problem validator (see below), etc. – must be configurable on a per-problem basis.

==== Input/Output Methods ====

:The CCS must be able to operate in such a way that submitted runs receive problem input data on their standard input stream, and are expected to write to their standard output stream.

==== Number of Problems ====

:The CCS may not impose an upper limit on the number of different contest problems.

==== Judge’s Data ====

===== Judge's Data Files =====

:For each contest problem the CCS must accept a set of files containing the judge’s test data to be used for that problem.

===== Data File Size =====

:The CCS must not enforce any size limit on the judge’s test data files, other than that imposed by the available disk space in the file system on the machine.

==== Limits ====

:For each of the limits described in this section, the CCS should have a reasonable default value that is used when a value is not specified.

===== Execution Time Limit =====

:The CCS must provide the ability to specify a separate execution time limit for each contest problem.  The execution time limit granularity must be at least in units of seconds.

===== Memory Limit =====

:The CCS must provide the ability to specify a separate memory limit for each contest problem.

===== Output Size Limit =====

:The CCS must provide the ability to specify a separate output size limit for each contest problem (i.e., a limit on the amount of data that submissions are allowed to write to their output streams).

===== Compilation Time Limit =====

:The CCS must provide the ability to specify a compilation time limit for submissions.

=== Configuration Change ===

:The CCS must allow updating of any configuration data without restarting or stopping the contest.

== Admin Interface ==

=== Account Disabling ===

:The CCS must have a mechanism to disable any account used by users of the system (either human users or other systems), without the need for starting or stopping the contest.  For example, this includes [[#Secure_Authentication|team accounts]], judge accounts, and the [[Event_Feed|Event feed]].

:If a user is currently logged in when the associated account is being disabled, that user must become logged out of the system.

=== Starting the Contest ===

:The contest should automatically start when the configured start time is reached. It must also be possible to start the contest at the current time.

=== Adjusting for Exceptional Circumstances ===

==== Removing time intervals ====

:It must be possible to specify time intervals that will be disregarded for the purpose of scoring. The time during all such intervals will not be counted towards a teams penalty time for solved problems.

==== Changing contest length ====

:It must be possible to change the length of the contest at any time during the contest.

==== Adding penalty time ====

:It must be possible to specify, for each team, an integer amount of penalty time to be added to that teams total penalty time.

=== Problem Enabling, Pausing, and Disabling ===

:Each contest problem can be in one of three mutually exclusive states: enabled, paused, and disabled.  The CCS must provide a mechanism to enable, pause and disable each contest problem separately without the need of stopping the contest.

:When a problem is disabled:
:# Teams must not be able to submit solutions to the problem. The problem name must be removed or disabled from submit interfaces where present.
:# Automatic judging of the problem must be disabled.
:# Submissions on the problem must not affect the scoreboard at all, including submissions received prior to disabling.

:When a problem is paused:
:# Teams must be able to submit solutions to the problem as if it was enabled.
:# Automatic judging of the problem must be disabled.
:# Submissions on the problem must be included in the scoreboard.

=== Rejudging === 

When a run is set to be rejudged it's current judgement is no longer valid and a new judgement will be obtained in the same manner as for a newly arrived run.

==== Automatic Rejudging ==== 

:The CCS must support the ability to rejudge a set of run submissions.  This means that it must be possible to provide the CCS with a filter of runs to be rejudged, based upon which the CCS automatically selects all runs matching the filter, and automatically rejudges them.

:The CCS must support these filters to be any combination of filters of the following type.

:# A specific (single) run.
:# All runs which have been submitted for a specific problem.
:# All runs which have been submitted using a specific language.
:# All runs which have been assigned any specific one of the allowable run judgments as defined in [[#Judge Responses|Judge Responses]], or all runs that received any judgment other than "Accepted" (that is, all rejected runs).
:# All runs which have been judged on a specific computer (identified in some reasonable way, e.g., IP address or hostname).  This requirement is only applicable if the CCS uses multiple machines to judge runs.

:Thus, for example, it must be possible to select "all rejected runs for problem B", "all Time Limit Exceeded runs using Java for problem C", or "all runs in C++".

==== Manual Rejudging ====

:The CCS must support the ability to assign, to a single run, an updated judgment chosen from among any of the allowable run judgments as defined in [[Contest_Control_System#Judge Responses|Judge Responses]].

:The CCS must support a separate authentication mechanism which encapsulates the ability to change a run judgment, and any manual changes to run judgments must be logged.

==== Notification of Rejudgment ====

:It must be possible to configure the extent to which the CCS sends [[#Team_Judgment_Notifications|Notifications]] about rejudged runs.  In particular, the following three options should be available.
:# Send no notifications about the rejudged runs.
:# Only send a notification if the judgment of the run was changed.
:# Send notifications for all the rejudged runs.

=== Freezing the Scoreboard ===

:The CCS must provide a way for admins to "freeze the scoreboard", i.e., to disable the updating of the scoreboard display seen by the teams and by the spectators.  An admin must be able to invoke this freeze function at any time during the contest, without stopping the contest or affecting team, judging, or contest administration operations in any other way.

:It must be possible to re-enable scoreboard display updating at any time after it has been disabled, again without stopping the contest or affecting contest operations in any way.

=== Disabling Notifications ===

:Various sections of this standard require that notifications regarding the judgment applied to a submitted run be able to be sent to the submitting team in several ways, including: from a human judge, from the automated judging system, and via an external notification (as described in the preceding subsection).

:For each potential source of a judgment notification sent to teams, the CCS must have an ability to disable separately the ability of teams to receive any notifications from that source. This disabling of judgment notifications must override any attempt of any other CCS component to send a judgment notification to teams. For example, it must be possible to suppress the function where an automated judging operation issues a judgment notification to a team, and the control which suppresses this automated judgment notification must be independent from the control which suppresses judgment notifications from the human judge and also separate from the control which suppresses external judgment notifications.

:In other words, the CCS must support the ability for the contest personnel to independently control whether judgment notifications from any specific source are actually made available to the teams.

:It must be possible to change the state (disabling or enabling) of one or more specific judgment notification sources while the contest is under way, without the need to stop the contest.

:It must be possible to change the state (disabling or enabling) of one or more specific judgment notification sources on a per-problem basis, so that the state of notification (enabled vs. disabled) for any given contest problem is independent of the corresponding state for another contest problem.

== Team Interface ==

=== Submitting a Run ===

:For purposes of this standard, the terms ''run'' and ''submission'', and any combination thereof, refer to a set of source code files submitted as a single unit at one time to the judging system by a team as a proposed solution to a given problem.

==== Submission Mechanism ====

:The CCS must provide each team with the ability to submit a run over the network to the judging system. 

==== Submission Contents ====

:A team must be able to specify, for each run submission: (a) the contest problem to which the submission applies; (b) the programming language used in the submission; (c) the source code file or files comprising the submission. The CCS must allow teams to specify arbitrarily many files in a given submission and must allow teams to make submissions for any defined contest problem and written in any defined contest programming language.

==== Submission Timestamping ====

:The CCS must associate and maintain two timestamps indicating when each run was submitted. The first is the contest time (aka contest clock), and must be at the granularity of seconds. The second is a timestamp of the current wall clock time, and must have finer granularity than seconds.

==== Team Viewing of Submission Status ====

:The CCS must provide each team with a capability for reviewing the status of each run the team has submitted, including: the contest time of the submission; the language and problem specified in the submission; and the response(s) from the judging system to the submission if any responses have occurred yet.

==== Submission Security ====

:The CCS must insure that no team can learn anything about the run submissions of any other team (other than what can be deduced from the scoreboard).

=== Submitting a Clarification ===

:For purposes of this standard, the terms ''clarification'', ''clarification request'', and ''clar'' all refer to a message sent from a team to the judges asking for clarification
regarding a contest problem.

==== Clarification Mechanism ====

:The CCS must provide each team with the ability to submit a clarification request to the judges over the network. 

==== Clarification Content ====

:The team must be able to specify the text content of a clarification request. The CCS may optionally require the team to identify the problem about which a clarification is being requested, but this is not a requirement (since the team can identify the problem within the text of the clarification message).

==== Clarification Timestamping ====

:The CCS must associate and maintain two timestamps indicating when each clarification was submitted. The first is the contest time (aka contest clock), and must be at the granularity of seconds. The second is a timestamp of the current wall clock time, and must have finer granularity than seconds.

==== Team Viewing of Clarification Status ====

:The CCS must provide each team with a capability for reviewing the status of each clarification request the team has submitted, including: the contest time of the clarification request; the problem identified in the clarification request if identification of a specific problem was required by the CCS; and the response from the judges to the clarification if any response has occurred yet.

==== Clarification Security ====

:The CCS must insure that no team can see the clarification requests of any other team, except as provided in the section [[Contest_Control_System#Human_Judge_Interface | Human Judge Interface]].

=== Broadcast Messages ===

==== Team Viewing of Broadcast Messages ====

:The CCS must provide each team with a capability for viewing any broadcast messages sent by the judges (see [[Contest_Control_System#Issuing_Broadcast_Messages| Issuing Broadcast Messages]] under Judging).

==== Notification of New Broadcasts ====

:The CCS must provide a mechanism to notify teams of the existence of a new broadcast message (that is, a message which has been broadcast since the last time the team checked for broadcast messages as provided under Team Review, above).

=== Internal Notifications ===

:The CCS must provide a mechanism for sending a judging response message to each team for each submitted run as soon as a judgment determination is made for that run. The judging response message must be transmitted automatically over the network at the time a judging decision is made (whether by the automated judging capability or by a human judge).

:'''Comment:''' This needs to be reworded slightly to fit into this section.[[User:Niemela|Fredrik Niemelä]] 19:08, 28 January 2011 (CET)

=== Scoreboard Display ===

:The CCS must provide a mechanism for teams to view the current scoreboard. The scoreboard should be updated at least every 30 seconds.

:During times when the scoreboard updating is disabled, teams must be able to view the scoreboard which was most recently viewable prior to the disable operation taking place. (This is generally referred to as the ability to ''freeze'' the scoreboard display).

== Judge Interface ==

=== Simultaneous Judging ===

:It must be possible for multiple human judges, working on different computers, to simultaneously perform the operations specified in this subsection (on different run submissions).

=== Viewing Runs ===

:The CCS must provide a human judge with the ability to perform each of the following operations:

:# See a list of all submitted runs, where the list includes (for each run) the contest-relative time at which the run was submitted, the problem for which the run was submitted, the language specified in the run submission, and any judgments applied to the run by either a human judge or by the automated judging system; 
:# Compile and execute the program contained in any specific run submission, with the corresponding contest problem data automatically supplied to the program; 
:# View the output produced by the program when run against the specified input data; 
:# Download and view the source code contained in any specific submitted run; 
:# View the compiler output resulting from compiling any specific run utilizing the compiler arguments configured in the CCS; 
:# View the validator output resulting from invoking the external validator associated with the contest problem for any specific submitted run; 
:# View the judge's input data file associated with the contest problem for any specific submitted run; 
:# View the "judge's output" (the "correct answer" file) associated with the contest problem for any specific submitted run;

=== Handling Clarifications ===

:The CCS must provide a human judge with the ability to perform each of the following operations:

:# See a list of all clarification requests, where the list includes (for each clar) the team which submitted the request, the contest-relative time at which the clar was submitted, and an indication of whether or not an answer to the clar has been sent to the team which submitted it;
:# Determine, for any specific clarification request, what answer was returned to the team if the clar has already been answered;
:# Compose an answer to the clar and send it, along with the text of the original clarification request, to the team;
:# Optionally choose to also send the clarification request text and answer to all teams in the contest.

=== Issuing Broadcast Messages ===

:The CCS must provide the ability for a human judge to compose a message and broadcast that message over the contest network to all teams in the contest.

=== Scoreboard Display ===

:The CCS must provide a mechanism for judges to view the current scoreboard. The scoreboard should be updated at least every 30 seconds.

:During times when the scoreboard updating is disabled, judges must still be able to view the current (updated) scoreboard.

== Judging ==

=== Automatic Invocation ===

:The CCS must provide the ability to invoke an automated judging mechanism when a team submits a run. This mechanism must automatically (that is, without human intervention) detect each newly submitted run, and for each such run must automatically:

:# Compile (if appropriate for the language) the program contained in the submitted run, enforcing the [[#Compilation_Time_Limit|compilation time limit]].
:# Execute the program contained in the submitted run, with the corresponding contest problem data automatically supplied to the program;
:# Prevent the submitted program from performing any [[#Prohibited_Operations|prohibited operations]].
:# Enforce any configured [[#Execution_Time_Limit|execution time limit]], [[#Memory_Limit|memory limit]], and [[#Output_Size_Limit|output size limit]] specified for the corresponding problem by terminating the execution of the submitted program if it exceeds any of these limits;
:# Invoke an external program, known for purposes of this standard as a [[#External Validators|validator]], passing to it the output generated by the program specified in the submitted run and getting back from it an indication of what judgment is to be applied to the run (see the [[#External Validators|External Validators]] section);
:# Assign an [[#Judge_Responses|appropriate judgment]] to the run.

=== Security ===

==== Libraries ====

:The CCS must ensure that when a program submitted by a team is compiled and linked (as appropriate to the language), any libraries which are linked with or otherwise utilized by the program are strictly those provided by or specified by the judges. For example, the CCS must not allow a program compiled and linked with libraries from a team’s machine to be utilized for judging purposes.

==== Prohibited Operations ====

:The CCS must automatically prevent a submitted program from performing prohibited operations.

:The prohibited operations are:
:# Using libraries except those explicitly allowed
:# Executing other programs
:# Creating new processes
:# Creating new threads
:# Reading any files
:# Creating files
:# Sending signals to other programs
:# Side-stepping time or memory limits
:# Sending or receiving network traffic
:# Sleeping

=== Judge Responses ===

:The CCS must answer each submitted run with one of the following responses:

:* '''Compile Error'''
:* '''Security Violation'''
:* '''Run-Time Error'''
:* '''Time Limit Exceeded'''
:* '''Wrong Answer'''
:* '''Accepted'''
:* '''Judging Error'''

=== Assigning a Judgment ===

The next two sections define how to assign a judgment to a program for problems with a single input file and with multiple input files, respectively.  Note however that the '''Judging Error''' and '''Security Violation''' judgments constitute exceptions to this, as defined in [[#Exceptional Judgments|Exceptional Judgments]].

==== Judging With a Single Input File ====

:To determine which answer to use, the following rules must be applied in order:

:# If the submitted program fails to compile or compilation exceeds the [[#Compilation_Time_Limit|compilation time limit]], the response must be '''Compile Error'''.
:# If the submitted program exceeds the [[#Memory_Limit|memory limit]] or crashes before the [[#Execution_Time_Limit|execution time limit]] is exceeded, the answer must be '''Run-Time Error'''.
:# If the submitted program runs longer than the [[#Execution_Time_Limit|execution time limit]], the answer must be '''Time Limit Exceeded'''.
:# If the output of the submitted program exceeds the [[#Output_Size_Limit|output size limit]] or if the output of the submitted program is not accepted by the output validator, the answer must be '''Wrong Answer'''.
:# If the output of the submitted program is accepted by the output validator, the answer must be '''Accepted'''.

==== Judging With Multiple Input Files ====

:If the problem has multiple judge input files the judgment is assigned as follows:

:# For each input file, in alphabetical order, apply the [[#Judging With a Single Input File|decision process for a single input file]].
:# If any file is not judged as '''Accepted''', the response must be that of the first file that was not judged '''Accepted'''.
:# Otherwise the response must be '''Accepted'''.

:Note that the CCS is only required to judge as many files as needed to determine the first file, if any, that is not judged AC.

==== Exceptional Judgments ====

:The preceding sections define how to assign a judgment to a submitted program.  However, the following two exceptions apply:

:# If, during any point of the judging process, a '''Judging Error''' happens, this must be the judgment.
:# If, during any point of the judging process, a '''Security Violation''' happens (and no '''Judging Error''' happens), this must be the judgment.

:A '''Judging Error''' happens if an error occurs that the CCS can not recover from during the judging process. Runs judged as '''Judging Error''' are considered pending for scoring purposes.

:A '''Security Violation''' happens if the submitted program tries to perform a prohibited operation.

=== Judgment Timestamping ===

:The CCS must associate and maintain a timestamp indicating when each judgment was submitted. This is a timestamp of the current wall clock time, and must have finer granularity than seconds.

=== Validators ===

==== Per-Problem Invocation ====

:The CCS must provide a mechanism for invoking a problem-specific external validator program as part of the automated judging process. 

==== Validator Interface ====

:The interface between the CCS and each external validator must conform to the [http://www.ecs.csus.edu/pc2/doc/valistandard.html International Collegiate Programming Contest Validator Interface Standard].

:'''Comment''': Some consideration is being given to updating/modifying the Validator Standard referenced above; contributors interested in this discussion should check appropriate threads on the CLICCS mailing list.

==== Machine Residency ====

:It must be possible to load each external validator directly onto the World Finals machines (as opposed for example requiring off-machine access to some code repository).

'''Comment''': this should be (implicitly?) defined in the [[Problem format]] specification.

==== Validator Creation ====

:It is not a requirement that the CCS be capable of compiling, interpreting, or otherwise creating the executable form of an external validator; it is assumed that each external validator will be provided in an executable form which can be executed as a stand-alone program on the specified World Finals platform.

==== Default Validator ====

:The CCS should provide at least a default “diff” validator capability which compares the output of a submitted run with the correct output as supplied by the judges and returns a judgment based on the results of the diff.

=== Balloon Notifications ===

:The CCS must have an ability to send a message, called a balloon notification, for every run which have received an accepted judgment. The notification must include at least

:# A sequence number of the notification. 
:# Identification of the team that submitted the run.
:# The contest time at which the run was submitted. 
:# The problem to which the judgment applies.
:# The color of balloon which applies to that problem (see Configuring Problems, below). 
:# A list of all problems solved by the team so far, along with their balloon colors.
:# "First in contest" if this is the earliest submitted run that is accepted.
:# "First for problem" if this is the earliest submitted run that is accepted for this problem.
:# "First for team" if this is first notification of acceptance for this team. 

:Note that run judgements may not come in the same order as submissions, meaning that the first notification of acceptance does not have to be for the earliest submitted accepted run. 

:The sequence numbers assigned to the external notifications are used to detect if a notification is missing (e.g., due to printer malfunction). The CCS must provide at least one of the two following features: (1) the CCS must be able to resend a previously sent message with a given sequence number upon request; (2) the CCS must have an interface listing all notifications, and allowing a user to access the data included in any one of them. Such a complete list of notifications must be protected in such a way that teams cannot access it.

:It is optional whether the CCS also provides the ability to send notifications for runs which receive rejected judgments, but it must be possible to configure the CCS to only send notifications for accepted runs.

====Notification feed====
Like the event feed, the balloon notifications are provided as an xml document that can be processed as a stream using e.g., a SAX parser.

A notification should be sent the first time a team solves a particular problem. If a previously accepted run is rejected due to rejudging, no notification is sent, nor is a notification sent if and when the team subsequently solves the problem.

TODO: Can you make requests?

=====Example=====
 <?xml version="1.0" encoding="UTF-8" ?>
 <notifications>
   <notification>
     <team-id>34</team-id>
     <team>U Waterloo</team>
     <time>132.04213</time>
     <nr>214</nr>
     <balloon>
       <problem-id>B</problem-id>
       <problem>Bulls and bears</problem>
       <rgb>ff0000</rgb>
       <color>Red</color>
     </balloon>
     <first-by-team>true</first-by-team>
     <balloons>
       &lt;!-- balloons that team already has --&gt;
       <ballon>..</ballon>
       <ballon>..</ballon>
     </balloons>
   </notification>
  ...more notifications
 </notifications>

=====Elements=====
======notifications======
Root element. Contains zero or more notifications. Closing tag only sent once contest is over.
======notification======
Sent for each balloon to be printed. Contains
;team-id: Team's number in contest (1, 2, etc) (int)
;team: Team name (same as or similar to team sign) (string)
;time: minutes since contest started, contest time (float)
;nr: id of notification, sequential starting at 1 (int)
;balloon : see below
;first-in-contest: required only when true (bool)
;first-for-problem: required only when true (bool)
;first-by-team: required only when true (bool)
;balloon: list of ballons team already should have

======balloon======
Describes a balloon for a problem
;problem-id : A, B, etc (character)
;problem : name / title of problem (string)
;rgb : 3-byte RGB value encoded in hex (string)
;color : color name (string)

====Access to notifications====
TODO. Conenct to some port, authenticate in some way, get summary somehow.

== Scoring ==

=== Scoring Data Generation ===

:The CCS must be capable of automatically generating up-to-date scoring data according to the following:

:# For purposes of scoring, the ''contest time of a submission'' is the number of minutes elapsed from the beginning of the contest when the submission was made, skipping removed time intervals if specified (see [[#Removing_time_intervals|Removing Time Intervals]]).  This is rounded ''down'' to the nearest minute, so 59.99 seconds is 0 minutes.
:# The ''contest time that a team solved a problem'' is the contest time of the team's first accepted submission to that problem.
:# A team's ''penalty time on a problem'' is the contest time that the team solved the problem, plus 20 minutes for each previous rejected run by that team on that problem, or 0 if the team has not solved the problem.
:# A team's ''total penalty time'' is the sum of the penalty times for all problems.
:# A team's ''last accepted submission'' is the contest time of the problem that the team solved last.
:# The ''position'' of a team is determined by sorting the teams by number of problems solved (descending), total penalty time (ascending), last accepted submission (ascending).
:# The ''rank'' of a team is the determined as follows:
:## For teams in positions up to and including 12+B, the rank equals the position.  Here, B is the number of extra bronzes awarded (the default value of B is 0).
:## Teams that solved fewer problems than the median team should not be ranked at all.
:## For the remaining teams, the rank is determined by sorting the teams by number of problems solved (descending).

:When a number of teams are tied for the same position/rank, they all occupy the same position/rank and a suitable number of subsequent positions/ranks are left empty.  For instance, if four teams are tied for 17th position, they are all in 17th position and positions 18, 19 and 20 are unoccupied.

=== Scoreboard ===

:The ''current scoreboard'' lists the teams sorted by position (with alphabetical order on team name as tie breaker).  It includes for each team their position, number of problems solved, total penalty time, and list of problems solved (including the time the problem was solved an how many attempts it took).

:The CCS must be capable of generating an external file containing the current scoreboard. The format of this file must be as defined in [[#scoreboard.tsv|the appendix]].

:The CCS must automatically save an updated copy of the external scoring data file whenever the scoring data itself is updated as described above.

=== Final results ===

:The ''final results'' lists the teams sorted by rank (with alphabetical order on team name as tie breaker).  It includes for each team their rank and:
:# The number of problems solved, if the team is ranked (i.e., if they solved more than the median number of problems).
:# The total penalty time and last accepted submission, if the team is in rank up to 12+B. 

:The CCS must be capable of generating an external file containing the final results of the World Finals contest. The format of this file must be as defined in the [[#results.tsv|Appendix]].

'''Comment:''' This does not currently quite match the file format described in the appendix, some fixing is needed. [[User:Austrin|Austrin]] 11:04, 5 February 2011 (CET)

== Data Export ==

=== Event Feed ===

:It is a requirement that the CCS provide an ''external event feed API''.  This means that the CCS must have a mechanism for external processes to connect to the CCS and obtain dynamic real-time updates regarding the current state of the contest.

:'''Comment''': The details of the required mechanism for the external event feed API are currently under development; see [[Event Feed|Event Feed]] for additional information.

== Testability Requirements ==

:'''Comment''': This section is under development and has yet to be written/completed [[User:Douglas Lane|Douglas Lane]] 20:39, 27 January 2011 (CET)

=== Scriptable Submissions ===

:The CCS must provide a mechanism by which team submissions of both runs and clarification requests can be scripted for automated testing. In other words, the CCS must provide a command-line based interface allowing an external program to submit a run to the CCS and to submit a clarification request to the CCS.

:The run submission and clarification submission command-line interfaces must provide mechanisms for specifying all parameters that would be specified by a team utilizing the corresponding interactive interface, including that the command-line interfaces must accept and perform validation of user credentials before accepting a run or a clarification request.

:The requirements of this subsection are intended to provide a method by which the World Finals Director of Operations can perform automated testing on the CCS during the Certification Process (see [[Contest_Control_System#Certification Process| Certification Process]]). The CCS implementers should assume that the scripting interfaces will be invoked multiple times in rapid succession, in arbitrary order with arbitrary parameters, by external scripts; care should therefore be taken by the implementers to avoid any design or implementation characteristics which limit or prohibit the ability of an external [[Test Harness]] framework to operate in this manner.

== Documentation Requirements ==

=== Team Guide ===

:The CCS must include a “Team Guide” document in PDF format. The Team Guide must provide all the necessary instructions showing how a contest team uses the functions of the team interface.

:The Team Guide must also describe the way in which judge’s responses to submitted runs and clarifications are received by teams.

=== Judge’s Guide ===

:The CCS must include a “Judge’s Guide” document in PDF format. The Judge’s Guide must provide all the necessary instructions showing how a human contest judge uses the functions of the human judge interface. 

=== Contest Administrator’s Guide ===

:The CCS must include a “Contest Administrator’s Guide” document in PDF format. The Administrator’s Guide must provide all the necessary instructions showing how contest personnel use the functions of the CCS to set up and manage a contest.

:In the event that a configuration item is provided by using services of the underlying operating system rather than facilities directly implemented or controlled by the CCS itself, the administrator’s Guide must explicitly state this fact, and reference the System Manager’s Guide (see below) as the source of information on handling that portion of configuration and preparation for the contest.

=== System Manager’s Guide ===

:The CCS must include a “System Manager’s Guide” document in PDF format. The System Manager’s Guide must describe the steps required to install and start the CCS on the OS platform specified for use in the World Finals. In the event that the CCS consists of multiple modules and/or packages, the guide must contain a description of the relationship between the modules or packages, including any specific installation and/or startup steps required for each module or package.

:The System Manager’s Guide must provide instructions to contest personnel explaining situations (if any) where the CCS uses functions of the underlying operating system (OS) platform to meet requirements laid out in this standard. For example, if the CCS relies on the use of OS account and password management to implement requirements related to contest security and credentials, or print services provided by the OS to implement requirements related to external notifications, this must be described in the System Manager’s Guide.

:The System Manager’s Guide must explicitly list any operating system dependencies of the CCS, including but not limited to which OS platform and version are required and which optional OS packages must be installed for the CCS to function properly.

:The System Manager’s Guide must explicitly list any software dependencies of the CCS. For example, any tools such as Java, PERL, WebServer, Browser, database systems, etc., which are required for correct operation of the CCS must be listed in the guide, including specific version numbers of each tool which the CCS requires for its correct operation.

:The System Manager’s Guide must describe the steps required to use each of the “Testability Interfaces” described in the section on Testability. For example, the guide must describe how to invoke the command-line tool which supports submitting runs from a team, as well as describing the use of all other required testability interfaces.

== Certification Process ==

=== Items Which Must Be Submitted ===

:In order for a given CCS to be considered as a candidate for running the ICPC World Finals contest, a single archive file (e.g. .zip, .tar, .tar.gz, .tgz, etc.) must be submitted to the World Finals Director of Operations. The archive file must contain all of the following items:

:# The complete set of files, modules, or packages making up the executable components of the CCS;
:# PDF’s for each of the documents listed under [[Contest_Control_System#Documentation_Requirements| Documentation Requirements]];
:# A short ASCII text file named “License” stating that the CCS, including all its components, are in the public domain, or else stating that the CCS and all of its components are the property of the submitting individual or agency and granting a non-exclusive irrevocable license to the ACM ICPC to use the CCS in any way that it deems appropriate; and
:# A short ASCII text file named “ReadMe” containing instructions on how to properly unpack the archive file to set up the installation process.

=== Certification Schedule ===

:To be considered for evaluation as a candidate to run the ICPC World Finals, a CCS must be submitted in the form described above not later than the end of May in the year preceding the year in which the Finals will take place.

:Upon receiving a complete submission for a CCS prior to the deadline, the World Finals Director of Operations or his/her designee will schedule an evaluation test. The evaluation test may require anywhere from several weeks up to 3 months to complete.

:Upon completion of testing, the Director of Operations will issue a test report to the individual or agency which submitted the CCS. If the CCS passes the evaluation test it will be placed on the list of candidates to be considered for running the World Finals the following year. If the CCS fails the evaluation test, the test report will indicate what requirement or requirements the CCS failed to satisfy. In that event the submitters may resubmit an updated version of the CCS for evaluation for the subsequent year’s testing cycle.

 
 
== Appendix: File formats ==

All files should be encoded in utf-8.

=== contest.yaml ===

A YAML file consisting of a mapping with the following keys:

{| class="wikitable"
! Key !! Description
|-
| name || Name of contest 
|-
| short-name || Short name of contest
|-
| start-time || Date and time in ISO 8601 format
|-
| duration || Duration as h:mm:ss
|-
| default-clars || Sequence of pre-defined clarification messages. The first will be pre-selected
|}

==== Example ====

 # Contest configuration
 ---
 name:       ACM-ICPC World Finals 2011
 short-name: ICPC WF 2011
 start-time: 2011-02-04 01:23Z
 duration:   5:00:00
 
 default-clars:
   - No comment, read problem statement
   - This will be answered during the answers to questions session
 ...

=== languages.yaml ===

A YAML file consisting of a sequence of mappings with the following keys:

{| class="wikitable"
! Key !! Description
|-
| language || Name of language 
|-
| compiler || Path to compiler
|-
| compiler-args || Argument list for compiler. {files} denotes where to include the file list
|-
| runner || Path to runner. Optional, relevant for interpreted languages and languages running on a VM
|-
| runner-args || Argument list for runner
|}

==== Example ====

 ---
 - language: 
   compiler:   
   compiler-args:
   runner:
   runner-args:
 
 - language: 
   compiler:   
   compiler-args:
   runner:
   runner-args:
 ...

'''Comment:''' we need to add some sample values in the example. [[User:Niemela|Fredrik Niemelä]] 04:30, 10 February 2011 (CET)

=== problemset.yaml ===

A  YAML file consisting of a sequence of mappings with the following keys:

{| class="wikitable"
! Key !! Description
|-
| letter || Upper case letter designating the problem 
|-
| short-name || The problem identifier, used to map to the problem data
|-
| color || Color of balloon used for this problem
|-
| rgb || RGB values for balloon used for this problem (should match color above)
|}

==== Example ====

 # Problem set configuration
 ---
 - letter:     A
   short-name: apl
   color:      yellow
   rgb:        #ffff00
 
 - letter:     B
   short-name: barcodes
   color:      red
   rgb:        #ff0000
 
 - letter:     C
   short-name: biobots
   color:      green
   rgb:        #00ff00
 
 - letter:     D
   short-name: castles
   color:      blue
   rgb:        #0000ff
 
 - letter:     E
   short-name: channel
   color:      white
   rgb:        #ffffff
 ...

=== groups.tsv ===

A text file consisting of a version line and one line for each group (super regionals at the WF) that needs to be tracked separately with regards to results. Each line has tab separated fields as defined below.


The first line has the following format
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Label || file_version|| fixed string (always same value)
|-
| 2 || Version number || 1  || integer
|}

Then follow several lines with the following format (one per team group).
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Group ID ||902|| integer
|-
| 2 || Group name ||North America  || string
|}

=== teams.tsv ===

A text file consisting of a version line and one line for each team in the contest. Each line has tab separated fields as defined below.

The first line has the following format
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Label || file_version|| fixed string (always same value)
|-
| 2 || Version number || 1  || integer
|}


Then follow several lines with the following format (one per team).
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Team number || 22 || integer
|-
| 2 || Reservation ID || 24314 || integer
|-
| 3 || Group ID || 4 || integer
|-
| 4 || Team name ||Hoos || string
|-
| 5 || Institution name ||University of Virginia  || string
|-
| 6 || Institution short name || U Virginia  || string
|-
| 7 || Country || USA || string ISO 3166-1 alpha-3
|}

=== scoreboard.tsv ===

A text file consisting of a version  line and one line for each team in the contest, sorted in position order with alphabetical order on team name as tie breaker. Each line has tab separated fields as defined below.

The first line has the following format
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Label || file_version || fixed string (always same value)
|-
| 2 || Version number || 1 || integer
|}

Then follow several lines with the following format (one per team).
{| class="wikitable"
! Field !! Descriptionc !! Example !! Type
|-
| 1 || Institution name || University of Virginia || string
|-
| 2 || Reservation ID || 24314|| integer
|-
| 3 || Position in contest || 1 || integer
|-
| 4 || Number of problems the team has solved || 4 || integer
|-
| 5 || Total Time || 534 || integer
|-
| 6 || Time of the last accepted submission || 233 || integer
|-
| 6 + 2''i'' - 1 || Number of submissions for problem ''i'' || 2 || integer
|-
| 6 + 2''i'' || Time when problem was solved || 233 || integer
|-
|}

The Reservation ID for a team can be found in the
[[#teams.tsv|teams.tsv]].

The time when problem was solved must be < 0 when the problem was not solved. Same for time of last accepted submission if there were none.

=== results.tsv ===

A text file consisting of a version  line and one line for each team in the contest, sorted in rank order with alphabetical order on team name as tie breaker. Each line has tab separated fields as defined below.

The first line has the following format
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Label || file_version|| fixed string (always same value)
|-
| 2 || Version number || 1  || integer
|}

Then follow several lines with the following format (one per team).
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Reservation ID || 24314|| integer
|-
| 2 || Rank in contest || 1 || integer
|-
| 3 || Award || gold || string
|-
| 4 || Number of problems the team has solved || 4 || integer
|-
| 5 || Total Time || 534 || integer
|-
| 6 || Time of the last submission || 233 || integer
|}

The Reservation ID for a team can be found in the
[[#teams.tsv|teams.tsv]].

Award is a string with value "gold", "silver", "bronze", "ranked" or "honorable" as appropriate.

=== userdata.tsv ===

A text file consisting of a version line and  one line for each team in the contest, its username and password for the CCS.

The first line has the following format
{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Label || file_version|| fixed string (always same value)
|-
| 2 || Version number || 1  || integer
|}

{| class="wikitable"
! Field
! Description
! Example
! Type
|-
| 1 || Team Number || 42 || integer
|-
| 2 || Institution name || University of Virginia  || string
|-
| 3 || Username || team-001 || string
|-
| 4 || Password || B!5MWJiy || string
|}

== Introduction ==

This page describes a '''draft''' API for accessing information provided by a [[Contest_Control_System|Contest Control System]] or [[CDS|Contest Data Server]].
Such an API can be used by a multitude of clients:
* an external scoreboard
* a scoreboard resolver application
* contest analysis software, such as the [[ICAT]] toolset
* another "shadow" CCS, providing run-forwarding together with the event feed
* internally, to interface between the CCS server and judging instances

This API is meant to be useful, not only at the ICPC World Finals, but more generally in any ICPC-style contest setup. It is meant to incorporate and supersede the [[JSON_Scoreboard_2016|JSON Scoreboard]], the [[Draft_2014_REST_interface_for_source_code_fetching|REST interface for source code fetching]], and the [[Contest_Start_Interface|Contest start interface]]. This REST interface is specified in conjuction with the new [[JSON Event Feed]], which provides all changes to this interface as CRUD-style events.

== General design principles ==

The interface is implemented as a HTTP REST interface that outputs information in [https://en.wikipedia.org/wiki/JSON JSON] format. The specific base URL will be dependent on the server (main CCS or CDS) providing the service; below we only indicate the relative paths of API endpoints. This REST interface should be provided over HTTPS to guard against eavesdropping on sensitive contest data and authentication credentials (see roles below).

We follow standard REST practices so that a whole collection can be requested, e.g. at the URL path
  GET https://example.com/api/teams
while an element with specific ID is requested as
  GET https://example.com/api/teams/10

A collection is always returned as a JSON list of objects. Every element represents a single element (and always includes the ID). When requesting a single element the exact same object is returned. E.g. the URL path
 GET baseurl/<collection>
returns
 [ { "id":<id1>, <element specific data for id1>},
   { "id":<id2>, <element specific data for id2>},
      ...
 ]
while the URL path
 GET baseurl/<collection>/<id1>
returns
 { "id":<id1>, <element specific data for id1>}

The standard HTTP verbs are used:
;GET
: Read data. This method is idempotent and does not modify any data. It can be used to request a whole collection or a specific element.
;POST
: Create a new element. This can only be called on a collection endpoint. No '''id''' attribute should be specified as it is up to the server to assign one, which is returned in the location header.
;PUT
: Replaces a specific element. This method is idempotent and can only be called on a specific element and replaces its contents with the data provided. The payload data should be complete, i.e. no partial updates are allowed. The '''id''' attribute cannot be changed: it does not need to be specified (other than in the URL) and if specified different from in the URL, a '''409 Conflict''' HTTP code should be returned.
;PATCH
: Updates/modifies a specific element. Similar to '''PUT''' but allows partial updates by providing only that data, for example:
: <code>PATCH https://example.com/api/teams/10</code>
: with JSON contents
: <code>{"name":"Our cool new team name"}</code>
: No updates of the '''id''' attribute are allowed either.
;DELETE (to be included)
: Delete a specific element. Idempotent, but may return a 404 status code when repeated. Any provided data is ignored. Example:
: <code>DELETE https://example.com/api/teams/8</code>
: Any deletes should always keep the referential integrity intact: at no time should an ID exist that refers to a deleted element. This can be ensured by either first deleting referenced elements (i.e. "ON DELETE CASCADE" in SQL terms) or setting the referencing ID to <tt>null</tt> (i.e. "ON DELETE SET NULL" in SQL terms) when this is allowed.

Standard [https://en.wikipedia.org/wiki/List_of_HTTP_status_codes HTTP status codes] are returned to indicate success or failure.

=== Roles ===

Access to (specific parts of) the REST API is controlled via user roles. The provider should require HTTP authentication to access each role. This provides a standard and flexible method, while the user one authenticates as implies a role that can be used for fine-grained access control.

Each provider must support at least the following roles, although additional roles may be supported for specific uses:
* public (default role: contest data that's available to everyone)
* admin (data or capability only available to contest administrators)

Role-based access may completely hide some objects from the user, may omit certain attributes, or may embargo or omit objects based on the current contest time. 
By default, the public user has read-only access (no '''POST''', '''PUT''', '''PATCH''' or '''DELETE''' methods allowed) and does not have access to judgements and runs from submissions made after the contest freeze time.
'''TODO''': Details are listed for each object.

=== Recurring details ===

'''Absolute timestamps''' (type <tt>&lt;TIME&gt;</tt> in the specification)
are human-readable, given in [https://en.wikipedia.org/wiki/ISO_8601 ISO 8601] extended combined date/time format with timezone: <tt>yyyy-mm-ddThh:mm:ss(.uuu)?[+-]zz(:mm)?</tt> (or timezone <tt>Z</tt> for UTC).

'''Relative times''' (type <tt>&lt;RELTIME&gt;</tt> in the specification)
are human-readable, given in a slight modification of the [https://en.wikipedia.org/wiki/ISO_8601 ISO 8601] extended time format: <tt>(-)?(h)*h:mm:ss(.uuu)?</tt>

'''Identifiers''' (type <tt>&lt;ID&gt;</tt> in the specification)
are given as string consisting of characters <tt>[a-zA-Z0-9-_]</tt> of length at most 36 and not starting with a <tt>-</tt> (dash).

Ids are assigned by the person or system that is the source of the object, and must be maintained by downstream systems. For example, the person configuring a contest on disk will typically define the id for each team, and any CCS or CDS that exposes the team must use the same id.

Some ids are also used as identifiable labels and are marked below along with the recommended format. These ids should be meaningful for human communication (e.g. team "43", problem "A") and are as short as reasonable but not more than 10 characters. Ids not marked as labels may be random characters and cannot be assumed to be suitable for display purposes.

'''Ordinals''' (with type <tt>integer</tt>)
are used to give an explicit order to a list of objects. Ordinal attributes must be non-negative and unique in a list of objects, and they should typically be low numbers starting from zero.
However, clients must not assume that the ordinals start at zero nor that they are sequential. Instead the ordinal values should be used to sort the list of objects.

'''File''' content is not included in the JSON in GET responses, but can be accessed via a corresponding child URL, e.g. <tt>/organizations/43/logo</tt>. The mime type must be provided by the server, and servers may support content negotiation for different mime types. When using POST, PUT or PATCH to add or update an object, then the file content should be included within the JSON of the parent object as a base64 encoded string, e.g.
    POST https://example.com/api/organizations
with JSON data
    { "id":"inst105",
      "name":"Carnegie Mellon University",
      ...
      "logo":"&lt;base64 string&gt;"
    }

'''Stream''' content (type <tt>&lt;STREAM&gt;</tt> in the specification) represent streaming content sources like live video. They are not included in JSON GET responses, but can be accessed via a corresponding child URL, e.g. teams/43/desktop will stream a team's desktop video. Some servers may support content negotiation for different mime types.

== Extensibility ==

This specification is meant to cover the basic data of a contest, with the idea that server/client implementations can extend this with more data and/or roles.
In particular, this specification already lists some endpoints or specific attributes as optional, or required only in ICPC World Finals context.
The following guidelines are meant to ease extensibility.

* Clients should accept extra attributes in endpoints, that are not specified here.
* Servers should not expect clients to recognize more than the basic, required specification.
* In this specification and extensions, an attribute with value <tt>null</tt> may be left out by the server (i.e. not be present). A client must treat an attribute with value <tt>null</tt> equivalently as that attribute not being present.

== Interface specification ==

The following list of API endpoints are to be supported. Note that
<code>contest</code>, <code>scoreboard</code> and <code>event-feed</code> are singular nouns
and indeed contain only a single element.

All endpoints should support '''GET'''; specific details on other
methods are mentioned below.

The endpoints could be categorised into 3 groups as follows:

;Configuration: /, /languages, /problems, /teams, /organizations, /groups, /judgement-types
;Live data: /submissions, /judgements, /runs, /clarifications, /awards
;Aggregate data: /scoreboard, /event-feed

Configuration is normally set before contest start. Is not expected to, but could occasionally be updated during a contest. It does not have associated
timestamp/contest time attributes. Updates are notified via the event feed.

Live data is generated during the contest and new elements are expected. Data is immutable though, only inserts, no updates or deletes of elements. It does have associated
timestamp/contest time attributes. Inserts and deletes are notified via the event feed. '''Note''': judgements are the exception to immutability in a weak sense: they get updated once with the final verdict.

Aggregate data: Only '''GET''' makes sense. These are not included in the event feed.

In the tables below, the columns are:
;Name: Attribute name; object sub-attributes are indicated as <tt>object.attribute</tt>.
;Type: Data type of the attribute; either a [https://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example JSON type] or [[Draft_CCS_REST_interface#Recurring_details|a type defined above]].
;Required?: Whether this is a required attribute that '''must''' be implemented to conform to this specification.
;Nullable?: Whether the attribute might be <tt>null</tt> (and thus implicitly can also not be present in that case).
;@WF: Specifies whether this attribute is implemented at the ICPC World Finals and by whom.
;Description: Description of the meaning of the attribute and any special considerations.

Note that if an attribute is required and nullable, then if in a particular instance it is <tt>null</tt>, it may be left out. On the other hand, an attribute that is optional, but not nullable must either always be present (if the server implements/uses it), or never be present (if the server does not implement/use it). If an attribute is not implemented by a server, then it must never be present; this means that if a client sees an attribute, this means that the server implements it.


=== / &nbsp; (contest) ===

Provides information on the current contest.

On a system that supports multiple contests the '''baseurl''' could look something like <tt>basebaseurl/contests/<id></tt>, i.e. this endpoint is actually an element in the collection '''contests''' one level higher. On a system that does not support multiple contests the '''baseurl''' could look like <tt>basebaseurl/contest</tt>.

Returns a JSON object with the elements below. If there is no current (this may include about to start or just finished) contest, a 404 error is returned.
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the current contest
|-
| name
| string
| yes
| no
| CCS
| display name of the contest
|-
| formal_name
| string
| no
| no
| CCS
| full name of the contest
|-
| start_time
| TIME
| yes
| yes
| CCS
| start time of the contest, may be <tt>null</tt> during contest pause
|-
| duration
| RELTIME
| yes
| no
| CCS
| length of the contest
|-
| scoreboard_freeze_duration
| RELTIME
| no
| no
| CCS
| how long the scoreboard is frozen before the end of the contest
|-
| penalty_time
| integer
| no
| no
| CCS
| penalty time for a wrong submission, in minutes
|-
| state
| object
| yes
| no
| CCS
| JSON object as specified below
|-
| state.running
| boolean
| yes
| no
| CCS
| whether the contest is currently running
|-
| state.frozen
| boolean
| depends
| no
| CCS
| whether the scoreboard is currently frozen. Required iff scoreboard_freeze_duration is present.
|-
| state.final
| boolean
| yes
| no
| CCS
| whether the standings have been finalized
|}

==== PATCH start_time ====

To replace the [[Contest Start Interface]], at the ICPC World Finals,
a CCS or CDS implementing this specification should allow for a specific role
('''FIXME''': define name later?) that has the ability to clear or set
the contest start time.

The PATCH must include a valid JSON element with only two attributes
allowed: the contest id (used for verification) and a start time (a
<code>&lt;TIME&gt;</code> value or <code>null</code>).

The request should fail with a 401 if the user does not have
sufficient access rights, or a 403 if the contest is started or within
30s of starting, or if the new start time is in the past or within 30s.

==== Example ====

Request:
  GET https://example.com/api/contest
Returned data:
  {"id":"7b0dd4ea-19a1-4434-9034-529ebe55ab45","name":"2014 ICPC World Finals",
   "formal_name":"38th Annual World Finals of the ACM International Collegiate Programming Contest",
   "start_time":"2014-06-25T10:00:00+01","duration":"5:00:00","scoreboard_freeze_duration":"1:00:00","penalty_time":20,
   "state":{"running":true,"frozen":false,"final":false}}
Request:
  GET https://example.com/api/contest
Returned data:
  {"id":"dress2016","name":"2016 ICPC World Finals Dress Rehearsal",
   "start_time":null,"duration":"2:30:00",
   "state":{"running":false,"final":false}}
Request:
  PATCH https://example.com/api/contest
Request data:
  {"id":"7b0dd4ea-19a1-4434-9034-529ebe55ab45","start_time":"2014-06-25T10:00:00+01"}
Request:
  PATCH https://example.com/api/contest
Request data:
  {"id":"wf2016","start_time":null}

=== /languages ===

Lists programming languages that can be used for submissions.

Returns a JSON array, with each element an object describing a language, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the language
|-
| name
| string
| yes
| no
| CCS
| name of the language
|}

==== Example ====

Request:
  GET https://example.com/api/languages
Returned data:
  [{"id":"1-java","name":"Java"},
   {"id":"cpp","name":"GNU C++"},
   {"id":"4358281971166881160","name":"Python"}
  ]

=== /problems ===

Lists problems in the current contest.

Returns a JSON array, with each element an object describing a problem, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the problem, at the WFs the directory name of the problem archive
|-
| label
| string
| yes
| no
| CCS
| label of the problem on the scoreboard, typically a single capitalized letter
|-
| name
| string
| yes
| no
| CCS
| name of the problem
|-
| ordinal
| integer
| yes
| no
| CCS
| ordering of problems on the scoreboard
|-
| rgb
| string
| no
| no
| CCS
| hexadecimal RGB value of problem color as specified in [http://en.wikipedia.org/wiki/Web_colors#Hex_triplet HTML hexadecimal colors], e.g. '#AC00FF' or '#fff'
|-
| color
| string
| no
| no
| CCS
| human readable color description associated to the RGB value
|-
| test_data_count
| integer
| yes
| no
| CCS
| number of test data sets
|}

==== Example ====

Request:
  GET https://example.com/api/problems
Returned data:
  [{"id":"asteroids","label":"A","name":"Asteroid Rangers","ordinal":1,"color":"blue","rgb":"#00f","test_data_count":10},
   {"id":"bottles","label":"B","name":"Curvy Little Bottles","ordinal":2,"color":"gray","rgb":"#808080","test_data_count":15}
  ]

=== /organizations ===

Lists all organizations (i.e. universities in ICPC context).

Returns a JSON array, with each element an object describing an organization, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the organization
|-
| icpc_id
| string
| no
| yes
| CCS
| external identifier from ICPC CMS
|-
| name
| string
| yes
| no
| CCS
| display name of the organization
|-
| formal_name
| string
| no
| yes
| CCS
| full organization name if too long for normal display purposes.
|-
| country
| string
| no
| yes
| no
| [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3 ISO 3-letter code] of the organization's country
|-
| url
| string
| no
| yes
| CDS
| URL to organization's website
|-
| twitter_hashtag
| string
| no
| yes
| CDS
| organization hashtag
|-
| location
| object
| no
| yes
| CDS
| JSON object as specified below
|-
| location.latitude
| float
| depends
| no
| CDS
| latitude. Required iff location is present.
|-
| location.longitude
| float
| depends
| no
| CDS
| longitude. Required iff location is present.
|}

For all organizations there are also endpoints returning files associated with the organization.

{| class="wikitable"
|-
! Endpoint
! Type
! Required?
! @WF
! Description
|-
|  /organizations/<id>/logo
| image/png
| no
| CDS
| logo of the organization
|-
|  /organizations/<id>/logo/160px
| image/png
| no
| CDS
| requests a smaller logo of the organization that is 160 pixels in size. The server may return this smaller logo if it is able, or may return the same as /logo
|-
|  /organizations/<id>/logo/56px
| image/png
| no
| CDS
| requests a smaller logo of the organization that is 56 pixels in size. The server may return this smaller logo if it is able, or may return the same as /logo
|}

==== Example ====

Request:
  GET https://example.com/api/organizations
Returned data:
  [{"id":"inst123","icpc_id":"433","name":"Shanghai Jiao Tong U.","formal_name":"Shanghai Jiao Tong University"},
   {"id":"inst105","name":"Carnegie Mellon University","country":"USA"}
  ]

=== /groups ===

Lists all groups (at the World Finals these are the super regions).

Returns a JSON array, with each element an object describing a team, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the group
|-
| icpc_id
| string
| no
| yes
| CCS
| external identifier from ICPC CMS
|-
| name
| string
| yes
| no
| CCS
| name of the group
|}

==== Example ====

Request:
  GET https://example.com/api/groups
Returned data:
  [{"id":"asia-74324325532","icpc_id":"7593","name":"Asia"}
  ]

=== /teams ===

Lists all teams in the contest.

Returns a JSON array, with each element an object describing a team, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the team. Usable as a label, at WFs normally the team seat number
|-
| icpc_id
| string
| no
| yes
| CCS
| external identifier from ICPC CMS
|-
| name
| string
| yes
| no
| CCS
| name of the team
|-
| organization_id
| ID
| no
| yes
| CCS
| identifier of the organization (e.g. university or other entity) that team is affiliated to
|-
| group_id
| ID
| no
| yes
| CCS
| identifier of the group this team is part of (in ICPC WFs these are the super-regions)
|-
| location
| object
| no
| no
| CDS
| JSON object as specified below.
|-
| location.x
| float
| depends
| no
|CDS
| Team's x position in meters. Required iff location is present
|-
| location.y
| float
| depends
| no
| CDS
| Team's y position in meters. Required iff location is present
|-
| location.rotation
| float
| depends
| no
| CDS
| Team's rotation in degrees. Required iff location is present
|}

For all teams there are also endpoints returning files associated with the team.
{| class="wikitable"
|-
! Endpoint
! Type
! Required?
! @WF
! Description
|-
| /teams/<id>/photo
| image/png or image/jpeg
| no
| CDS
| registration photo of the team
|-
| /teams/<id>/video
| video/?
| no
| CDS
| registration video of the team
|-
| /teams/<id>/backup
| application/zip
| no
| CDS
| latest file backup of the team machine as a zip archive
|-
| /teams/<id>/desktop
| STREAM
| no
| CDS
| streaming video of the team desktop
|-
| /teams/<id>/webcam
| STREAM
| no
| CDS
| streaming video of the team webcam
|}

==== Example ====

Request:
  GET https://example.com/api/teams
Returned data:
  [{"id":"11","icpc_id":"201433","name":"Shanghai Tigers","organization_id":"inst123","group_id":"asia-74324325532"},
   {"id":"123","name":"CMU1","organization_id":"inst105","group_id":"8"}
  ]

=== /judgement-types ===

Lists all judgement types available (i.e. possible responses when judging a submission).

Returns a JSON array, with each element an object describing a team, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the judgement type. Usable as a label, typically a 2-3 letter capitalized shorthand, see [http://www.problemarchive.org/wiki/index.php/Problem_Format#Graders Problem Format]
|-
| name
| string
| yes
| no
| CCS
| name of the judgement
|-
| penalty
| boolean
| depends
| no
| CCS
| whether this judgement causes penalty time; should be present if and only if contest:penalty_time is present
|-
| solved
| boolean
| yes
| no
| CCS
| whether this judgement is considered correct
|}

==== Example ====

Request:
  GET https://example.com/api/judgement-types
Returned data:
  [{"id":"CE","name":"Compiler Error","penalty":false,"solved":false},
   {"id":"AC","name":"Accepted","penalty":false,"solved":true}
  ]

=== /submissions ===

List of submissions in the current contest.

Returns a JSON array, with each element an object describing a submission, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the submission. Usable as a label, typically a low incrementing number
|-
| language_id
| ID
| yes
| no
| CCS
| identifier of the language submitted for
|-
| problem_id
| ID
| yes
| no
| CCS
| identifier of the problem submitted for
|-
| team_id
| ID
| yes
| no
| CCS
| identifier of the team that made the submission
|-
| time
| TIME
| yes
| no
| CCS
| timestamp of when the submission was made
|-
| contest_time
| RELTIME
| yes
| no
| CCS
| contest relative time when the submission was made
|-
| entry_point
| string
| yes
| yes
| CCS
| code entry point for specific languages
|}

For all submissions there are also endpoints returning files associated with the submission.

{| class="wikitable"
|-
! Endpoint
! Type
! Required?
! @WF
! Description
|-
| /submissions/<id>/files
| application/zip
| yes
| CCS
| submission files, contained at the root of the zip archive
|-
| /submissions/<id>/reaction
| video/?
| no
| CDS
| reaction video from team's webcam
|}

The endpoint '''/files''' provides the file(s) of a given submission as a zip archive. These should be stored directly from the root of the zip file, i.e. there should not be extra directories (or files) added unless these are explicitly part of the submission content.
For '''POST''', '''PUT''' and '''PATCH''' methods, '''files''' would be included as an attribute in the submission and contain the base64-encoded string of the zip archive.

==== Example ====

Request:
  GET https://example.com/api/submissions
Returned data:
  [{"id":"187","team_id":"abc123","problem_id":"10-asteroids",
    "language_id":"1-java","time":"2014-06-25T11:22:05.034+01","contest_time":"1:22:05.034","entry_point":"Main"}
  ]

=== /judgements ===

Lists judgements of submissions.

Security:
* For clients with the public role, judgements will not be included for submissions received after the scoreboard freeze.

Returns a JSON array, with each element an object describing a judging, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the judgement
|-
| submission_id
| ID
| yes
| no
| CCS
| identifier of the submission judged
|-
| judgement_type_id
| ID
| yes
| yes
| CCS
| the verdict of this judgement
|-
| start_time
| TIME
| yes
| no
| CCS
| absolute time when judgement started
|-
| start_contest_time
| RELTIME
| yes
| no
| CCS
| contest relative time when judgement started
|-
| end_time
| TIME
| yes
| yes
| CCS
| absolute time when judgement completed
|-
| end_contest_time
| RELTIME
| yes
| yes
| CCS
| contest relative time when judgement completed
|}

When a judgement is started, each of <tt>judgement_type_id</tt>, <tt>end_time</tt> and <tt>end_contest_time</tt> will be <tt>null</tt>.
These are set when the judgement is completed.

==== Example ====

Request:
  GET https://example.com/api/judgements
Returned data:
  [{"id":"189549","submission_id":"wf2017-32163123xz3132yy","judgement_type_id":"CE","start_time":"2014-06-25T11:22:48.427+01",
    "start_contest_time":"1:22:48.427","end_time":"2014-06-25T11:23:32.481+01","end_contest_time":"1:23:32.481"},
   {"id":"189550","submission_id":"wf2017-32163123xz3133ub","judgement_type_id":null,"start_time":"2014-06-25T11:24:03.921+01",
    "start_contest_time":"1:24:03.921","end_time":null,"end_contest_time":null}
  ]

=== /runs ===

Lists judgements of individual test cases of a submission.

Returns a JSON array, with each element an object describing a judging, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the run
|-
| judgement_id
| ID
| yes
| no
| CCS
| identifier of the judgement this is part of
|-
| ordinal
| integer
| yes
| no
| CCS
| ordering of runs in the judgement (implicit from the test cases)
|-
| judgement_type_id
| ID
| yes
| no
| CCS
| the verdict of this judgement (i.e. a judgement type)
|-
| time
| TIME
| yes
| no
| CCS
| absolute time when run completed
|-
| contest_time
| RELTIME
| yes
| no
| CCS
| contest relative time when run completed
|}

==== Example ====

Request:
  GET https://example.com/api/runs
Returned data:
  [{"id":"1312","judgement_id":"189549","ordinal":28,"judgement_type_id":"TLE",
    "time":"2014-06-25T11:22:42.420+01","contest_time":"1:22:42.420"}
  ]

=== /clarifications ===

Lists clarification requests &amp; replies.

Returns a JSON array, with each element an object describing a test case, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CCS
| identifier of the clarification
|-
| from_team_id
| ID
| yes
| yes
| CCS
| identifier of team sending this clarification request, <tt>null</tt> if a clarification sent by jury
|-
| to_team_id
| ID
| yes
| yes
| CCS
| identifier of the team receiving this reply, <tt>null</tt> if a reply to all teams or a request sent by a team
|-
| reply_to_id
| ID
| yes
| yes
| CCS
| identifier of clarification this is in response to, otherwise <tt>null</tt> 
|-
| problem_id
| ID
| yes
| yes
| CCS
| identifier of associated problem, <tt>null</tt> if not associated to a problem
|-
| text
| string
| yes
| no
| CCS
| question or reply text
|-
| time
| TIME
| yes
| no
| CCS
| time of the question/reply
|-
| contest_time
| RELTIME
| yes
| no
| CCS
| contest time of the question/reply
|}
Note that at least one of <tt>from_team_id</tt> and <tt>to_team_id</tt> has to be <tt>null</tt>. That is, teams cannot send messages to other teams.

==== Example ====

Request:
  GET https://example.com/api/clarifications
Returned data:
  [{"id":"wf2017-1","from_team_id":null,"to_team_id":null,"reply_to_id":null,"problem_id":null,"text":"Do not touch anything before the contest starts!",
    "time":"2014-06-25T11:59:27.543+01","contest_time":"-0:15:32.457"}
  ]
Request:
  GET https://example.com/api/clarifications
Returned data:
  [{"id":"wf2017-8","from_team_id":null,"to_team_id":"abc123","reply_to_id":"wf2017-5","problem_id":"10-asteroids","text":"Does bouncing means bounce to the grid above the current one? Read the problem statement",
    "time":"2014-06-25T12:43:02.037+01","contest_time":"2:28:02.037"}
  ]

=== /awards ===

Lists all awards (medals, first to solve, etc.). This endpoint is optional, but if it is provided all elements are required.

Returns a JSON array, with each element an object describing an award, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| id
| ID
| yes
| no
| CDS
| identifier of the award, typically an enum value like "medal", "first-to-solve", "place", "winner", "group", or "rank"
|-
| citation
| string
| yes
| no
| CDS
| award citation, e.g. "Gold medal winner"
|-
| team_ids
| array
| yes
| no
| CDS
| JSON array of team ids receiving this award
|}

==== Example ====

Request:
  GET https://example.com/api/awards
Returned data:
  [{"id":"gold-medal","citation":"Gold medal winner","team_ids":["54","23","1","45"]},
   {"id":"first-to-solve-a","citation":"First to solve problem A","team_ids":["45"]},
   {"id":"first-to-solve-b","citation":"First to solve problem B","team_ids":[]}
  ]

=== /scoreboard ===

Provides the scoreboard of the current contest.

Since this is generated data, only the '''GET''' method is allowed
here, irrespective of role.

Security:
* For clients with the public role, the scoreboard will not include information from judgements of submissions received after the scoreboard freeze.

Returns a JSON array where each element is an object that represents a row for one team. The array is
sorted according to rank and alphabetical on team name within identically ranked teams.
Each row object contains:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| rank
| integer
| yes
| no
| CCS
| rank of this team, 1-based and duplicate in case of ties
|-
| team_id
| ID
| yes
| no
| CCS
| identifier of the team
|-
| score
| object
| yes
| no
| CCS
| JSON object as specified below (for possible extension to other scoring methods)
|-
| score.num_solved
| integer
| yes
| no
| CCS
| number of problems solved by the team
|-
| score.total_time
| integer
| yes
| no
| CCS
| total penalty time accrued by the team
|-
| problems
| array
| yes
| no
| CCS
| JSON array of problems with scoring data, see below for the specification of each element
|}
Each problem element within the scoreboard consists of:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Nullable?
! @WF
! Description
|-
| problem_id
| ID
| yes
| no
| CCS
| identifier of the problem
|-
| num_judged
| integer
| yes
| no
| CCS
| number of judged submissions (including possibly a final correct one)
|-
| num_pending
| integer
| yes
| no
| CCS
| number of pending submissions (either queued or due to freeze)
|-
| solved
| boolean
| yes
| no
| CCS
| whether the team solved this problem
|-
| time
| integer
| depends
| no
| CCS
| minutes into the contest when this problem was solved by the team. Required iff <tt>solved=true</tt>
|}

==== Example ====

Request:
  GET https://example.com/api/scoreboard
Returned data:
  [{"rank":1,"team_id":"abc123","score":{"num_solved":3,"total_time":340},
    "problems":[
     {"problem_id":"1","num_judged":3,"num_pending":1,"solved":false},
     {"problem_id":"2","num_judged":1,"num_pending":0,"solved":true,"time":20},
     {"problem_id":"3","num_judged":2,"num_pending":0,"solved":true,"time":55},
     {"problem_id":"4","num_judged":0,"num_pending":0,"solved":false},
     {"problem_id":"5","num_judged":3,"num_pending":0,"solved":true,"time":205}
    ]}
  ]

=== /event-feed ===

Provides the event feed for the current contest.

==== Feed options ====

===== Filtering events =====

If a client only wants some events the feed can be filtered with the "events" URL argument:

 /event-feed?events=submissions,teams

If not specified all events will be sent. If specified only the listed events will be sent.

===== Notification only =====

If a client does not want the "data" part of events this can be removed with the "no-data" URL argument:

 /event-feed?no-data

If not specified all events will include data. If specified the <tt>data</tt> attribute and its contents will not be present for any event.

===== Feed starting point =====

If a client wants data from some point in time this can be done with the "id" URL argument:

 /event-feed?id=dj593

If specified the event feed will include all events strictly ''after'' the specified id. If a client copies the id of an event and uses that for the id URL argument it will get all events after that event. This is useful e.g. if a client is disconnected and wants to continue where it left off.

If the id is not specified or invalid the event feed will include all events from the beginning of the feed.

Multiple requests of the event feed for the same period must return equivalent events (excluding heartbeat events), including historical timestamps and configuration changes. The system might contain the same heartbeat events every time, but it is not required to.

==== Feed format ====

The feed is served as [http://specs.okfnlabs.org/ndjson/ Newline delimited JSON], with every event as its own JSON object.

The general format for events is:
 {"event": "<event type>", "id": "<id>", "data": <data from endpoint> }

This document uses the terms "element". An element corresponds to a single object (run, judgement, language, team, etc.).

{| class="wikitable"
|-
! Name
! Description
! Format
|-
| event
| Name of the event. Used for filtering. 
| One of '''contests''', '''languages''', '''problems''', '''teams''', '''organizations''', '''groups''', '''judgement-types''', '''submissions''', '''judgements''', '''runs''', '''clarifications''', '''heartbeat'''.
|-
| id
| ID for the object that's being updated. Always present if event relates to element, never present if event relates to collection.
| String consisting of characters <tt>[a-zA-Z0-9-_]</tt> of length at most 36 and not starting with a <tt>-</tt> (dash).
|-
| data
| The exact data that would be returned if calling the corresponding API endpoint at this time.
| JSON object as defined by the [[Draft_CCS_REST_interface#Roles | REST API]].
|}

Events are not guaranteed to come in chronological order, since they may come from a distributed system. Specifically, some events have timestamps inside the "data" value and these might arrive out of order.

Every event with a corresponding API endpoint maps to an element in a collection. (The '''contests''' event is a special case. It could be argued that it is an element, and in any case it is treated as an element). When an event is sent as an element, that can either be an insert (if the ID given has not been seen before), update (if the ID has been seen before) or delete (if the ID has been seen before but the data element is "null").

==== Heartbeat ====

The event feed is guaranteed to send some data at least every 120 seconds. If no other event is sent, a heartbeat will be.

The heartbeat event does *not* have a corresponding API endpoint, so the endpoint and data keys are missing.

;Event ID: heartbeat
;Required elements: event, timestamp
;Example:
 {"event": "heartbeat", "timestamp": "2017-07-18T10:13:01+01"}

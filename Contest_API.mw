== Introduction ==

This page describes a '''draft''' API for accessing information provided by a [[Contest_Control_System|Contest Control System]] or [[CDS|Contest Data Server]].
Such an API can be used by a multitude of clients:
* an external scoreboard
* a scoreboard resolver application
* contest analysis software, such as the [[ICAT]] toolset
* another "shadow" CCS, providing run-forwarding together with the event feed
* internally, to interface between the CCS server and judging instances

This API is meant to be useful, not only at the ICPC World Finals, but more generally in any ICPC-style contest setup. It is meant to incorporate and supersede the [[JSON_Scoreboard_2016|JSON Scoreboard]], the [[Draft_2014_REST_interface_for_source_code_fetching|REST interface for source code fetching]], and the [[Contest_Start_Interface|Contest start interface]]. This REST interface is specified in conjuction with the new [[JSON Event Feed]], which provides all changes to this interface as CRUD-style events.

== General design principles ==

The interface is implemented as a HTTP REST interface that outputs information in [https://en.wikipedia.org/wiki/JSON JSON] format. The specific base URL will be dependent on the server (main CCS or CDS) providing the service; below we only indicate the relative paths of API endpoints.
The design is based on the [https://docs.google.com/document/d/12RVKS_u36WY9kU8iVIMzHtH5Df3WjK-mt-YmJu8j6ZI/edit ICPC Contest Ontology draft].

We follow standard REST practices so that a whole collection can be requested, e.g. at the URL path
  GET http://example.com/api/teams
while an element with specific ID is requested as
  GET http://example.com/api/teams/10
Querying on any other attributes than main ID is done through a URL argument "filter":
  http://example.com/api/teams?filter=group_id:7

A collection is always returned as a JSON list of objects. Every element represents a single element (and always includes the ID). When requesting a single element the exact same object is returned. E.g. the URL path
 GET baseurl/<collection>
returns
 [ { "id":<id1>, <element specific data for id2>},
   { "id":<id2>, <element specific data for id1>},
      ...
 ]
while the URL path
 GET baseurl/<collection>/<id1>
returns
 { "id":<id1>, <element specific data for id2>}

The standard HTTP verbs are used:
;GET
: Read data. This method is idempotent and does not modify any data. It can be used to request a whole collection or a specific element.
;POST
: Create a new element. This can only be called on a collection endpoint. No '''id''' attribute should be specified as it is up to the server to assign one, which is returned in the location header.
;PUT
: Replaces a specific element. This method is idempotent and can only be called on a specific element and replaces its contents with the data provided. The payload data should be complete, i.e. no partial updates are allowed.
;PATCH
: Updates/modifies a specific element. Similar to '''PUT''' but allows partial updates by providing only that data, for example:
: <code>PATCH http://example.com/api/teams/10</code>
: with JSON contents
: <code>{"name":"Our cool new team name"}</code>
;DELETE
: Delete a specific element. Idempotent, but may return a 404 status code when repeated. Any provided data is ignored. Example:
: <code>DELETE http://example.com/api/teams/8</code>

Standard [https://en.wikipedia.org/wiki/List_of_HTTP_status_codes HTTP status codes] are returned to indicate success or failure.

Access to (parts of) the API is optionally controlled by HTTP authentication. This provides a standard and flexible method, while the user one authenticates as can be used for fine-grained access control to specific bits.

=== Roles ===

Access to some of the REST services will be protected via user roles. We will define a set of standard roles like Administrator, Judge/Jury, and Team (one per team).
In the future we will list restrictions to each service and methods allowed based on role.

=== Recurring details ===

'''Absolute timestamps''' (type <tt>&lt;TIME&gt;</tt> in the specification)
are human-readable, given in [https://en.wikipedia.org/wiki/ISO_8601 ISO 8601] extended combined date/time format with timezone: <tt>yyyy-mm-ddThh:mm:ss(.uuu)?[+-]zz(:mm)?</tt> (or timezone <tt>Z</tt> for UTC).

'''Relative times''' (type <tt>&lt;RELTIME&gt;</tt> in the specification)
are human-readable, given in a slight modification of the [https://en.wikipedia.org/wiki/ISO_8601 ISO 8601] extended time format: <tt>(-)?(h)*h:mm:ss(.uuu)?</tt>

'''Identifiers''' (type <tt>&lt;ID&gt;</tt> in the specification)
are given as string consisting of characters <tt>[a-zA-Z0-9-_]</tt> of length at most 36 and not starting with a <tt>-</tt> (dash).

'''Labels''' (type <tt>&lt;LABEL&gt;</tt> in the specification)
are strings consisting of characters <tt>[a-zA-Z0-9-_]</tt> of length at most 10 and not starting with a <tt>-</tt> (dash).
The rationale is that these characters are both URL and filename safe, and the length is small enough to make these easy to use for human communication.
If an element has both an identifier and a label, then the intention is that the label can be identical to the identifier if it is short enough.

'''File contents''' (type <tt>&lt;FILE&gt;</tt> in the specification)
are given as base64 encoded string.
'''TODO''': also support a download URL?

== Extensibility ==

This specification is meant to cover the basic data of a contest, with the idea that server/client implementations can extend this with more data and/or roles.
In particular, this specification already lists some endpoints or specific attributes as optional, or required only in ICPC World Finals context.
The following guidelines are meant to ease extensibility.

* Clients should accept extra attributes in endpoints, that are not specified here.
* Servers should not expect clients to recognize more than the basic, required specification.
* In this specification and extensions, an attribute with value <tt>null</tt> must be treated equivalently to that attribute not being present. Furthermore, we default to attributes not being present (instead of <tt>null</tt>).

== Interface specification ==

The following list of API endpoints are to be supported. Note that
<code>contest</code> and <code>scoreboard</code> are singular nouns
and indeed contain only a single element.

All endpoints should support '''GET'''; specific details on other
methods are mentioned below.

The endpoints could be categorised into 3 groups as follows:

;Configuration: /, /languages, /problems/*, teams, /organizations, /groups, /judgement-types
;Live data: /submissions/*, /judgements, /runs, clarifications
;Aggregate data: /scoreboard, /event-feed

Configuration is normally set before contest start. Is not expected to, but could occasionally be updated during a contest. Does not have associated
timestamp/contest time attributes. Updates are notified via the event feed.

Live data is generated during the contest and new elements are expected. Data is immutable though, only inserts, no updates or deletes of elements. Does have associated
timestamp/contest time attributes. Inserts & deletes are notified via the event feed.

Derived data: Only GET makes sense. Not included in the event feed.

=== / ===

Provides information on the current contest.

On a system that supports multiple contests the '''baseurl''' could look something like <tt>basebaseurl/contests/<id></tt>, i.e. this endpoint is actually an element in the collection '''contests''' one level higher. On a system that does not support multiple contests the '''baseurl''' could look like <tt>basebaseurl/contest</tt>.

Returns a JSON object with the elements below. If there is no current (this may include about to start or just finished) contest, returns an empty object <tt>{}</tt>.
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the current contest
|-
| name
| string
| yes
| display name of the contest
|-
| formal_name
| string
| yes for WF
| full name of the contest
|-
| start_time
| TIME
| yes; may be <tt>null</tt> during contest pause
| start time of the contest
|-
| duration
| RELTIME
| yes
| length of the contest
|-
| scoreboard_freeze_duration
| RELTIME
| yes for WF
| how long the scoreboard is frozen before the end of the contest
|-
| penalty_time
| integer
| yes for WF
| penalty time for a wrong submission, in minutes
|}

==== PATCH start_time ====

To replace the [[Contest Start Interface]], at the ICPC World Finals,
a CCS or CDS implementing this specification should allow for a specific role
('''FIXME''': define name later?) that has the ability to clear or set
the contest start time.

The PATCH must include a valid JSON element with only two attributes
allowed: the contest id (used for verification) and a start time (a
<code>&lt;TIME&gt;</code> value or <code>null</code>).

The request should fail with a 401 if the user does not have
sufficient access rights, or a 403 if the contest is started or within
30s of starting, or if the new start time is in the past or within 30s.

==== Example ====

Request:
  GET http://example.com/api/contest
Returned data:
  {"id":"7b0dd4ea-19a1-4434-9034-529ebe55ab45","name":"2014 ICPC World Finals",
   "formal_name":"38th Annual World Finals of the ACM International Collegiate Programming Contest",
   "start_time":"2014-06-25T10:00:00+01","duration":"5:00:00","scoreboard_freeze_duration":"1:00:00","penalty_time":20}
Request:
  GET http://example.com/api/contest
Returned data:
  {"id":"wf2016","name":"2016 ICPC World Finals",
   "start_time":null,"duration":"5:00:00","scoreboard_freeze_duration":"1:00:00","penalty_time":0}

Request:
  PATCH http://example.com/api/contest
Request data:
  {"id":"7b0dd4ea-19a1-4434-9034-529ebe55ab45","start_time":"2014-06-25T10:00:00+01"}
Request:
  PATCH http://example.com/api/contest
Request data:
  {"id":"wf2016","start_time":null}

=== /languages ===

Lists programming languages that can be used for submissions.

Returns a JSON array, with each element an object describing a language, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the language
|-
| name
| string
| yes
| name of the language
|}

==== Example ====

Request:
  GET http://example.com/api/languages
Returned data:
  [{"id":"1-java","name":"Java"},
   {"id":"cpp","name":"GNU C++"},
   {"id":"4358281971166881160","name":"Python"}
  ]

=== /problems ===

Lists problems in the current contest.

Returns a JSON array, with each element an object describing a problem, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the problem
|-
| label
| LABEL
| yes
| label of the problem in the contest, typically a single capitalized letter
|-
| name
| string
| yes
| name of the problem
|-
| ordinal
| integer
| yes
| ordering of problems on the scoreboard
|-
| rgb
| string
| no
| hexadecimal RGB value of problem color as specified in [http://en.wikipedia.org/wiki/Web_colors#Hex_triplet HTML hexadecimal colors], e.g. '#AC00FF' or '#fff'
|-
| color
| string
| no
| human readable color description associated to the RGB value
|-
| test_data_count
| integer
| yes
| number of test data sets
<!-- Save this for later discussion - Jaap, 2015-02-11
|-
| timelimit
| float
| no
| time limit per testcase in seconds
|-
| memorylimit
| integer
| no
| memory limit in KiB
|-
| text
| BASE64
| no
| Problem description text ('''TODO''': in which format? PDF/HTML, either, add mime-type, unspecified?)
-->
|}

==== Example ====

Request:
  GET http://example.com/api/problems
Returned data:
  [{"id":"10-asteroids","label":"A","shortname":"asteroids","name":"Asteroid Rangers","ordinal":1,"color":"blue","rgb":"#00f"},
   {"id":"B","label":"B","shortname":"bottles","name":"Curvy Little Bottles","ordinal":2,"color":"gray","rgb":"#808080"}
  ]

=== /teams ===

Lists all teams in the contest.

Returns a JSON array, with each element an object describing a team, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the team
|-
| icpc_id
| string
| yes for WF
| external identifier from ICPC CMS
|-
| label
| LABEL
| yes
| human readable identifier, at WFs normally the team seat number
|-
| name
| string
| yes
| name of the team
|-
| organization_id
| ID
| yes
| identifier of the organization (e.g. university or other entity) that team is affiliated to
|-
| group_id
| ID
| yes for WF
| identifier of the group this team is part of (in ICPC WFs these are the super-regions)
|}

==== Example ====

Request:
  GET http://example.com/api/teams
Returned data:
  [{"id":"abc123","label":"123","icpc_id":"201433","name":"Shanghai Tigers","organization_id":"inst123","group_id":"asia-74324325532"},
   {"id":"11","label":"11","name":"CMU1","organization_id":"inst105","group_id":"8"}
  ]

=== /organizations ===

Lists all organizations (i.e. universities in ICPC context).

Returns a JSON array, with each element an object describing an organization, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the organization
|-
| icpc_id
| string
| yes for WF
| external identifier from ICPC CMS
|-
| name
| string
| yes
| display name of the organization
|-
| formal_name
| string
| no
| full organization name if too long for normal display purposes
|-
| country
| string
| no (not used at WF)
| [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3 ISO 3-letter code] of the organization's country
|-
| logo
| FILE
| no
| organization logo
|}

==== Example ====

Request:
  GET http://example.com/api/organizations
Returned data:
  [{"id":"inst123","icpc_id":"433","name":"Shanghai Jiao Tong U.","formal_name":"Shanghai Jiao Tong University"},
   {"id":"inst105","name":"Carnegie Mellon University","country":"USA"}
  ]

=== /groups ===

Lists all groups (at the World Finals these are the super regions).

Returns a JSON array, with each element an object describing a team, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the group
|-
| icpc_id
| string
| yes for WF
| external identifier from ICPC CMS
|-
| name
| string
| yes
| name of the group
|}

==== Example ====

Request:
  GET http://example.com/api/groups
Returned data:
  [{"id":"asia-74324325532","icpc_id":"7593","name":"Asia"}
  ]

=== /judgement-types ===

Lists all judgement types available (i.e. possible responses when judging a submission).

Returns a JSON array, with each element an object describing a team, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the judgement type
|-
| label
| LABEL
| yes
| label for this judgement, typically a 2-3 letter capitalized shorthand, see [http://www.problemarchive.org/wiki/index.php/Problem_Format#Graders Problem Format]
|-
| name
| string
| yes
| name of the judgement
|-
| penalty
| boolean
| yes
| whether this judgement causes penalty time
|-
| solved
| boolean
| yes
| whether this judgement is considered correct
|}

==== Example ====

Request:
  GET http://example.com/api/judgement-types
Returned data:
  [{"id":"CE","label":"CE","name":"Compiler Error","penalty":false,"solved":false},
   {"id":"0357c4a9-6983-45d7-8080-90d24c5511ea","label":"AC","name":"Accepted","penalty":false,"solved":true}
  ]

=== /submissions ===

List of submissions in the current contest.

Returns a JSON array, with each element an object describing a submission, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the submission
|-
| label
| LABEL
| yes
| human readable identifier, typically a low incrementing number
|-
| language_id
| ID
| yes
| identifier of the language submitted for
|-
| problem_id
| ID
| yes
| identifier of the problem submitted for
|-
| team_id
| ID
| yes
| identifier of the team that made the submission
|-
| time
| TIME
| yes
| timestamp of when the submission was made
|-
| contest_time
| RELTIME
| yes
| contest relative time when the submission was made
|-
| entry_point
| string
| yes, but can be <tt>null</tt>
| code entry point for specific languages
|-
| files
| array of file data
| yes, but can be <tt>null</tt>
| list of files, including names
|}

==== Example ====

Request:
  GET http://example.com/api/submissions
Returned data:
  [{"id":"wf2017-32163123xz3132yy","label":"187","team_id":"abc123","problem_id":"10-asteroids",
    "language_id":"1-java","time":"2014-06-25T11:22:05.034+01","contest_time":"1:22:05.034","entry_point":"Main", "files":[{"filename":"a.java"},{"filename":"b.java"}]}
  ]

=== /submissions/''X''/files ===

This provides the file(s) of a given submission (with id ''X''). In particular, it replaces the [[Draft_2014_REST_interface_for_source_code_fetching]].

Returns a JSON array, with each element an object describing a file, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the submission file
|-
| submission_id
| ID
| yes
| identifier of the submission
|-
| filename
| string
| yes
| filename of this file (without path? any disallowed characters?)
|-
| source
| FILE
| yes
| contents of the file
|}


==== Example ====

Request:
  GET http://example.com/api/submissions/wf2017-32163123xz3132yy/files
Returned data:
  [{"id":"d079c12d-98ce-4bb7-8097-ae083b45feb4","submission_id":"wf2017-32163123xz3132yy","filename":"a.java","source":"&lt;base64_string&gt;","main":true},
   {"id":"18e44041-8caf-4d77-8864-f5584f1ddfed","submission_id":"wf2017-32163123xz3132yy","filename":"helper.java","source":"&lt;base64_string&gt;","main":false}
  ]

=== /judgements ===

Lists judgements of submissions.

Parameters:
* '''submission_id''' (optional) identifier of submission to list all judgements associated to it

Returns a JSON array, with each element an object describing a judging, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the judgement
|-
| submission_id
| ID
| yes
| identifier of the submission judged
|-
| judgement_type_id
| ID
| yes
| the verdict of this judgement
|-
| time
| TIME
| yes
| absolute time when judgement completed
|-
| contest_time
| RELTIME
| yes
| contest relative time when judgement completed
|-
| run_ids
| Array of run_ids
| yes
| List of runs that comprise this judgement
|}

==== Example ====

Request:
  GET http://example.com/api/judgements
Returned data:
  [{"id":"189549","submission_id":"wf2017-32163123xz3132yy","judgement_type_id":"CE","time":"2014-06-25T11:22:48.427+01","contest_time":"1:22:48.427", run_ids: ["123455","123456","123457","123458","123459"]}
  ]

=== /runs ===

Lists judgements of individual test cases of a submission.

Parameters:
* '''judgement_id''' (optional) identifier of submission judgement to list all test case judgements associated to it

Returns a JSON array, with each element an object describing a judging, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the run
|-
| submission_id
| ID
| yes
| identifier of the submission this run is for
|-
| test_data_number
| integer
| yes
| identifier of the test data judged
|-
| judgement_type_id
| ID
| yes
| the verdict of this judgement (i.e. a judgement type)
|-
| output
| FILE
| yes
| team output for this test data
|-
| time
| TIME
| yes
| absolute time when run completed
|-
| contest_time
| RELTIME
| yes
| contest relative time when run completed
|}

==== Example ====

Request:
  GET http://example.com/api/runs
Returned data:
  [{"id":"1312","submission_judgement_id":"189549","test_case_id":"10-asteroids-28","judgement_type_id":"0357c4a9-6983-45d7-8080-90d24c5511ea",
    "output":"&lt;base64_string&gt;","time":"2014-06-25T11:22:42.420+01","contest_time":"1:22:42.420"}
  ]

=== /clarifications ===

Lists clarification requests &amp; replies.

Parameters:
* '''problem_id''' (optional) identifier of a problem to list only clarifications associated to that problem.

Returns a JSON array, with each element an object describing a test case, with the following elements:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| id
| ID
| yes
| identifier of the clarification
|-
| from_team_id
| ID
| yes; may be <tt>null</tt>
| identifier of team sending this clarification request, <tt>null</tt> if a clarification sent by jury
|-
| to_team_id
| ID
| yes; may be <tt>null</tt>
| identifier of the team receiving this reply, <tt>null</tt> if a reply to all teams or a request sent by a team
|-
| reply_to_id
| ID
| yes, may be <tt>null</tt>
| identifier of clarification this is in response to, if any. may be <tt>null</tt>
|-
| problem_id
| ID
| yes, may be <tt>null</tt>
| identifier of associated problem, may be <tt>null</tt>
|-
| text
| string
| yes
| question or reply text
|-
| time
| TIME
| yes
| time of the question/reply
|-
| contest-time
| RELTIME
| yes
| contest time of the question/reply
|}
Note that at least one of <tt>from_team_id</tt> and <tt>to_team_id</tt> has to be <tt>null</tt>. That is, teams cannot send messages to other teams.

==== Example ====

Request:
  GET http://example.com/api/clarifications
Returned data:
  [{"id":"wf2017-1","from_team_id":null,"to_team_id":null,"reply_to_id":null,"problem_id":null,"text":"Do not touch anything before the contest starts!",
    "time":"2014-06-25T11:59:27.543+01","contest_time":"-0:15:32.457"}
  ]
Request:
  GET http://example.com/api/clarifications
Returned data:
  [{"id":"wf2017-8","from_team_id":null,"to_team_id":"abc123","reply_to_id":"wf2017-5","problem_id":"10-asteroids","text":"Does bouncing means bounce to the grid above the current one? Read the problem statement",
    "time":"2014-06-25T12:43:02.037+01","contest_time":"2:28:02.037"}
  ]

=== /scoreboard ===

Provides the scoreboard of the current contest.

Since this is generated data, only the '''GET''' method is allowed
here, irrespective of role.

Returns a JSON array where each element is an object that represents a row for one team. The array is
sorted according to rank and alphabetical on team name within identically ranked teams.
Each row object contains:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| rank
| integer
| yes
| rank of this team, 1-based and duplicate in case of ties
|-
| team_id
| ID
| yes
| identifier of the team
|-
| score
| object
| yes
| object (for possible extension to other scoring methods) containing integer elements "num_solved" and "total_time"
|-
| problems
| array
| yes
| array of problems with scoring data, see below for the specification of each element
|}
Each problem element within the scoreboard consists of:
{| class="wikitable"
|-
! Name
! Type
! Required?
! Description
|-
| problem_id
| ID
| yes
| identifier of the problem
|-
| num_judged
| integer
| yes
| number of judged submissions (including possibly a final correct one)
|-
| num_pending
| integer
| yes
| number of pending submissions (either queued or due to freeze)
|-
| solved
| boolean
| yes
| whether the team solved this problem
|-
| time
| integer
| if and only if <tt>solved=true</tt>
| minutes into the contest when solved by team
|}

==== Example ====

Request:
  GET http://example.com/api/scoreboard
Returned data:
  [{"rank":1,"team_id":"abc123","score":{"num_solved":3,"total_time":340},
    "problems":[
     {"problem_id":"1","num_judged":3,"num_pending":1,"solved":false},
     {"problem_id":"2","num_judged":1,"num_pending":0,"solved":true,"time":20},
     {"problem_id":"3","num_judged":2,"num_pending":0,"solved":true,"time":55},
     {"problem_id":"4","num_judged":0,"num_pending":0,"solved":false},
     {"problem_id":"5","num_judged":3,"num_pending":0,"solved":true,"time":205}
    ]}
  ]

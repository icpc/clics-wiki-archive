The event feed is an externally-accessible XML feed of contest data supplied by a [[CCS|Contest Control System]]. The event feed is the primary way that 'external' clients can get the state of a running content. Typical clients include:

* ICPC Live, video coverage of the event.
* Contest-floor scoreboards.
* The "resolver", a graphical program showing what happened during the contest freeze.
* A balloon printer.
* Supporting 'shadow' CCSs, e.g. running a second non-active CCS for verification purposes.
* Post-contest testing by replaying contests.

== Accessing the Event Feed ==

Clients make use of the event feed by connecting to the event feed port provided by the CCS (event-feed-port in contest.yaml). All clients/account types can connect to this same port.

Clients must use SSL to connect; any client connection that doesn't use SSL is dropped.

=== Authentication ===

Once an SSL connection has been established, the client must send two lines (each with carriage returns) to log in:

Format:

{| class="wikitable"
! Line !! Attribute !! Description
|-
| 1 || User ID || Account name
|-
| 2 || Password || Account password
|}

Example:

 scoreboard1
 test

If the login succeeds, the server will start responding with the contest element (defined below). If the login is unsuccessful, the connection is dropped. Each user ID may only be used by a single client at any given time.

=== Account Types ===

The CCS must allow multiple user IDs to be configured for accessing the event feed. Each user ID belongs to a single account type, as defined below:

{| class="wikitable"
! Account Type !! Description !! Events not Included in Feed !! Events not Included in Feed after Scoreboard Freeze
|-
|floor || Used for clients that may display data visible to contest contestants  || testcases, run-source, clars not sent to all || run-judgements, notifications
|-
|public || Used for public clients || testcases || run-judgements, notifications
|-
|all|| Used for internal/sysop clients || None || None
|-
|}

CCS may implement account types using another mechanism (e.g. permissions), as long as the externally visible behaviour is the same.

== Information Updates ==

Configuration changes to the CCS or changing the judgement of a run (through, e.g., rejudging) must require that the affected event(s) be resent. Removal (or reinsertion) of a time interval resets the stream - see the <reset/> tag below.

== File Format ==
The event feed is an XML document within the root element <tt><contest></tt>. The root contest element is as follows:

{| class="wikitable"
! Attribute !! Description
|-
| version || The format version. Must be "1.0"
|-
| accountType || The type of account that was logged in. Allows clients to confirm that their user ID had the priviledges they expected
|}

Example:

 <contest version="1.0" accountType="floor">
   <info ... />
   <language ... />
   ...
 </contest>

Within the contest element are a number of configuration items and events, each of which are separate top-level elements:

Event types & tags:
{| class="wikitable"
! Element !! Contains !! Type
|-
|info|| contest information and updates || Configuration
|-
|language|| submission language information || Configuration
|-
|group|| group information || Configuration
|-
|judgement|| judgement information || Configuration
|-
|problem|| problem information || Configuration
|-
|team|| team information || Configuration
|-
|clar-request|| submitted clarification || Event
|-
|clar-response|| clarification response || Event
|-
|run|| submitted run and updates || Event
|-
|run-judgement|| judgement of a run and updates || Event
|-
|run-source|| source code submitted with a run and updates || Event
|-
|testcase|| judgement of individual test cases for a run || Event
|-
|penalty|| adjusted penalty time || Event
|-
|notification|| balloon notification || Event
|-
|finalized|| the contest standings/medals are assigned, contest is over || Event
|-
|reset|| reset notification || Event
|}

Notes
# contest-time elements are in minutes.
# timestamp elements are in seconds since the epoch, Jan 1st, 1970 00:00:00 UTC.

=== Configuration Elements ===

==== Info Element ====

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|title || Contest title || xsd:string
|-
|length || Length of contest in HH:MM:SS format || xsd:string
|-
|penalty || Penalty time in minutes || xsd:int
|-
|started || True if the contest is started || xsd:boolean
|-
|starttime || Wall-clock start time of the contest || xsd:string
|}

Example:

 <info>
   <title>The 2010 World Finals of the ACM International Collegiate Programming Contest</title>
   <length>05:00:00</length>
   <penalty>20</penalty>
   <started>false</started>
   <starttime>1265335138.26</starttime>
 </info>

==== Language Element ====

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|name || Language name || xsd:string
|}

Example:

 <language>
   <name>C++</name>
 </language>

==== Group Element ====

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|external-id || Identifier (integer) from [[Contest_Control_System#groups.tsv|groups.tsv (Group ID)]] || xsd:int
|-
|name || Group name from [[Contest_Control_System#groups.tsv|groups.tsv]] || xsd:string
|}

Example:

 <group external-id="3012">
   <name>Europe</name>
 </group>

==== Judgement Element ====

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|id || Judgement ID || xsd:int
|-
|acronym || Judgement acronym || xsd:string
|-
|name || Judgement name || xsd:string
|-
|penalty || True if this judgement is a failure that causes penalty time || xsd:boolean
|}

Example:

 <judgement id="3">
   <acronym>CE</acronym>
   <name>Compile Error</name>
   <penalty>true</penalty>
 </judgement>

==== Problem Element ====

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|id || Problem ID || xsd:int
|-
|state || One of enabled, paused, disabled || xsd:string
|-
|letter || Single letter problem label || xsd:string
|-
|name || Problem name || xsd:string
|-
|color || Color name || xsd:string
|-
|rgb || Color RGB value || xsd:string
|}

Example:

 <problem id="1">
   <state>enabled</state>
   <letter>A</letter>
   <name>APL Lives!</name>
   <color rgb="#ffff00">yellow</color>
 </problem>

==== Team Element ====

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|id || Team ID. From [[Contest_Control_System#teams.tsv|teams.tsv (Team ID)]] || xsd:int
|-
|external-id || External team id from [[Contest_Control_System#teams.tsv|teams.tsv (External ID) || xsd:int
|-
|name || Team name from [[Contest_Control_System#teams.tsv|teams.tsv]] || xsd:string
|-
|country || Country code, ISO 3166-1 alpha-3, from [[Contest_Control_System#teams.tsv|teams.tsv]] || xsd:string
|-
|institution || Institution name from [[Contest_Control_System#teams.tsv|teams.tsv]] || xsd:string
|-
|group || Group name [[Contest_Control_System#groups.tsv | groups.tsv]] from [[Contest_Control_System#teams.tsv|teams.tsv]] || xsd:string
|}

Example:

 <team id="1" external-id="23412">
   <name>The Winners</name>
   <country>LBN</country>
   <institution>American University of Beirut</institution> 
   <group>Europe</group> 
 </team>

=== Event Elements ===

==== Clar Request Event====

The clar-request event is sent when a team submits a clarification request.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|id || Clarification Request ID || xsd:int
|-
|team-id || Team ID || xsd:int
|-
|question || A question, typically from a team || xsd:string
|-
|category || Clarification category || xsd:string
|-
|contest-time || Contest (elapsed) time when the clarification was submitted || xsd:decimal
|-
|timestamp || Wall-clock time when the clarification was submitted || xsd:decimal
|}

Example:

 <clar-request id="1" team-id="0" problem-id="1">
   <question>What is the upper limit on the number of pieces of chocolate requested by the friends?</question>
   <category>Problem C</category>
   <contest-time>118.48</contest-time>
   <timestamp>1265335256.74</timestamp>
 </clar-request>

==== Clar Response Event ====

The clar response event is sent when a clar request has been answered.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|clar-request-id || Clarification Request ID || xsd:int
|-
|answer || Judge's answer to the question || xsd:string
|-
|to-all || True if the response was sent to all teams || xsd:boolean
|-
|contest-time || Contest (elapsed) time when the response was submitted || xsd:decimal
|-
|timestamp || Wall-clock time when the response was submitted || xsd:decimal
|}

Example:

 <clar-response clar-request-id="1">
   <answer>The number of pieces will fit in a signed 32-bit integer.</answer>
   <to-all>true</to-all>
   <contest-time>118.48</contest-time>
   <timestamp>1265335256.74</timestamp>
 </clar-response>

==== Run Event ====

A run event is sent whenever a team submits a run.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|id || Run ID || xsd:int
|-
|team-id || Team ID || xsd:int
|-
|problem-id || Problem ID || xsd:int
|-
|language || Language name || xsd:string
|-
|contest-time || Contest (elapsed) time when the run was submitted || xsd:decimal
|-
|timestamp || Wall-clock time when the run was submitted || xsd:decimal
|}

Example:

 <run id="1410" team-id="74" problem-id="4">
   <language>C++</language>
   <contest-time>17960.74</contest-time>
   <timestamp>1265353100.29</timestamp>
 </run>

==== Run Judgement Event ====

A run judgement event is sent whenever a judgement has been assigned to a run.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|run-id || Run ID || xsd:int
|-
|judgement-id || Judgement ID || xsd:int
|-
|judgement|| Judgement acronym || xsd:string
|-
|contest-time || Contest (elapsed) time when the judgement was assigned || xsd:decimal
|-
|timestamp || Wall-clock time when the judgement was assigned || xsd:decimal
|}

Example:

 <run-judgement run-id="1410" judgement-id="3">
   <judgement>WA</judgement>
   <contest-time>179.74</contest-time>
   <timestamp>1265353100.29</timestamp>
 </run-judgement>

==== Run Source Event ====

A run source event is sent along with every submitted run event.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|run-id || Run ID || xsd:int
|-
|(element content) || Base 64 encoded content of file || xsd:base64Binary
|}

Example:

 <run-source run-id="1410">
   TUWuIGIzI345...
 </run-source>

'''TODO''': multiple files, main file tag, need to maintain filenames

==== Testcase Event ====

A testcase event is sent when a run is judged against an input file.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|run-id || Run ID || xsd:int
|-
|i|| Testcase number || xsd:int
|-
|n|| Total number of testcases || xsd:int
|-
|judgement || Judgement acronym || xsd:string
|-
|contest-time || Contest (elapsed) time when the testcase was judged || xsd:decimal
|-
|timestamp || Wall-clock time when the testcase was judged || xsd:decimal
|}

Example:

 <testcase run-id="1">
   &lt;i>1&lt;/i>
   <n>1</n>
   <judgement>WA</judgement>
   <contest-time>939.75</contest-time>
   <timestamp>1265336078.01</timestamp>
 </testcase>

'''TODO''': Tim doesn't like the i/n

==== Penalty Event ====

A penalty event is sent when an administrator adds or removes penalty time for a team.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|team-id || Team ID || xsd:int
|-
|time || The number of penalty minutes || xsd:int
|-
|contest-time || Contest (elapsed) time when the penalty was added || xsd:decimal
|-
|timestamp || Wall-clock time when the penalty was added || xsd:decimal
|}

Example:

 <penalty team-id="74">
   <time>15</time>
   <contest-time>17960.74</contest-time>
   <timestamp>1265353100.29</timestamp>
 </penalty>

==== Notification Element ====
'''TODO''': What is supposed to happen if rejudging changes the state of a run from Accepted to Rejected? What is supposed to happen if rejudging changes which run was ''first to solve''.

A notification should be sent the first time a team solves a particular problem. It is not sent for rejected solutions, nor if the team submits another successful solution to the same problem. If a previously accepted run is rejected due to rejudging, no notification is sent.

:'''Comment:''' If a team has solved a problem, then the judges determine that the team has not solved the problem what action is taken? [[User:Douglas Lane|Douglas Lane]] 20:10, 16 May 2011 (CEST)

:'''Comment:''' Is the program that consumes the notifications responsible for tracking which have been send and which have not? [[User:Douglas Lane|Douglas Lane]] 17:06, 20 February 2011 (CET)

 <notification id="214" team-id="34">
  <team>U Waterloo</team>
  <contest-time>132.04</contest-time>
  <timestamp>1298733213.10</timestamp>
  <balloon problem-id="2">
    <label>B</label>
    <name>Bulls and bears</name>
    <color rgb="ff0000">red</color>
  </balloon>
  <first-by-team>true</first-by-team>
  <balloons>
    <!-- balloons that team already has -->
    <balloon problem-id="4">
      <label>D</label>
      <name>Down the hill</name>
      <color rgb="33cc00">green</color>
    </balloon>
    <balloon problem-id="6">
      <label>F</label>
      <name>Failing to make the grade</name>
      <color rgb="ffff00">yellow</color>
    </balloon>
  </balloons>
 </notification>

Sent for each balloon to be printed. Contains:
;id: id of notification, sequential starting at 1 (int)
;team-id: Team's number in contest (1, 2, etc) (int)
;team: Team name (same as or similar to team sign) (string)
;contest-time: minutes since contest started, contest time (float)
;timestamp: the current computer time when this element was created, decimal seconds 
;balloon: balloon info, see balloon element below
;first-in-contest: required only when true (bool)
;first-for-problem: required only when true (bool)
;first-by-team: required only when true (bool)
;balloons: list of balloons team should have (including this balloon)

===== Balloon Element =====
Describes a balloon for a problem
;problem-id: the id of the problem
;label: A, B, etc (character)
;name: name / title of problem (string)
;rgb: 3-byte RGB value encoded in hex (string)
;color: color name (string)

'''TODO''' notification section hasn't been reviewed. Tim doesn't like including the word 'balloon'. Tim doesn't like the repeated balloon list each time.

==== Finalized Event ====

The finalized event is sent when the contest is finalized. It must be the last event and will be followed immediately by the <tt></contest></tt> tag.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|last-gold|| The last place to receive a gold || xsd:int
|-
|last-silver|| The last place to receive a silver || xsd:int
|-
|last-bronze|| The last place to receive a bronze || xsd:int
|-
|comment|| A comment provided during the finalization || xsd:string
|-
|timestamp || Wall-clock time when the contest was finalized || xsd:decimal
|}

Example:

 <finalized>
   <last-gold>4</last-gold>
   <last-silver>8</last-silver>
   <last-bronze>12</last-bronze>
   <comment>Finalized by John Doe and Jane Doe</comment>
   <timestamp>1265336078.01</timestamp>
 </finalized>

==== Reset Event ====

Sending a <reset/> tells the client to disconnect and reconnect to read the stream from the beginning. A typical reason to send a reset would be the removal of a time interval, requiring update of the contest time for events already issued.

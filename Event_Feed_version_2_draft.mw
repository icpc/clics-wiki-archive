The event feed is a set of data output by the [[CCS|Contest Control System]].

== Accessing the Event Feed ==

Clients make use of the event feed by connecting to the event feed port provided by the CCS (event-feed-port in contest.yaml). All clients/account types can connect to this same port.

Clients must use SSL to connect; any client connection that doesn't use SSL is dropped.

=== Authentication ===

Once an SSL connection has been established, the client must send the following two lines to log in:

 scoreboard1
 test

;user ID (scoreboard1): the account name
;password (test): the account password

If the login succeeds, the server will start responding with the contest element (defined below). If the login is unsuccessful, the connection is dropped. Each user ID may only be used by a single client at any given time.

=== Account Types ===

The CCS must allow multiple user IDs to be configured for accessing the event feed. Each user ID belongs to a single account type, as defined below:

{| class="wikitable"
! Account Type !! Description !! Events not Included in Feed !! Events not Included in Feed after Scoreboard Freeze
|-
|ContestFloor || Used for clients that may display data visible to contest contestants  || testcases, run-source, clars not sent to all || run-judgements, notifications
|-
|Public || Used for public clients || testcases || run-judgements, notifications
|-
|Admin || Used for internal/sysop clients || None || None
|-
|}

CCS may implement account types using another mechanism (e.g. permissions), as long as the externally visible behaviour is the same.

== Updates of information ==
Configuration changes to the CCS or changing the judgement of a run (through, e.g., rejudging) requires that the affected events be resent. Removal (or reinsertion) of a time interval resets the stream. See the <reset/> tag below. 

== File format ==
The event feed is an XML document within the root element <tt><contest></tt>.

 <contest version="1.0" accountType="admin">
   <info ... />
   <language ... />
   ...
 </contest>

;version: the format version. Must be "1.0"
;accountType: the type of account that was logged in. Allows clients to confirm that their user ID had the priviledges they expected

All events are separate elements at the top level.

{| class="wikitable"
|+ Event types/tags
! Element !! Contains !! Type
|-
|info|| contest information and updates || Configuration
|-
|language|| submission language information || Configuration
|-
|group|| group information || Configuration
|-
|judgement|| judgement information || Configuration
|-
|problem|| problem information || Configuration
|-
|team|| team information || Configuration
|-
|clar|| submitted clarification information and updates || Event
|-
|run|| submitted run information and updates || Event
|-
|run-judgement|| judgement of a run and updates || Event
|-
|run-source|| source code submitted with a run and updates || Event
|-
|testcase|| judgement of individual test cases for a run || Event
|-
|notification|| balloon notification || Event
|-
|finalized|| the contest standings/medals are assigned, contest is over || Event
|}

Notes
# Submission events have a contest-time element in minutes 
# Timestamped events all have a timestamp element in decimal seconds.
# The <tt><finalized></tt> element is followed by a <tt></contest></tt> tag

:'''Comment''' Every event should have a timestamp, right? [[User:Douglas Lane|Douglas Lane]] 17:38, 17 April 2011 (CEST)

=== Configuration ===

==== Info Element ====

 <info>
   <title>The 2010 World Finals of the ACM International Collegiate Programming Contest</title>
   <length>05:00:00</length>
   <penalty>20</penalty>
   <started>false</started>
   <starttime>1265335138.26</starttime>
 </info>

;title: contest title string
;length: length of contest in HH:MM:SS format
;penalty: penalty time in minutes
;started: started flag
;starttime: starttime as a timestamp in decimal seconds

==== Language Element ====

 <language>
   <name>C++</name>
 </language>

;name: language name

==== Group Element ====

 <group external-id="3012">
   <name>Europe</name>
 </group>

;external-id: identifier (integer) from [[Contest_Control_System#groups.tsv|groups.tsv (Group ID)]]
;name: group name from [[Contest_Control_System#groups.tsv|groups.tsv]]

==== Judgement Element ====

 <judgement>
   <acronym>CE</acronym>
   <name>Compile Error</name>
 </judgement>

;acronym: judgement acronym
;name: descriptive name

==== Problem Element ====

 <problem id="1">
   <state>enabled</state>
   <label>A</label>
   <name>APL Lives!</name>
   <color rgb="#ffff00">yellow</color>
 </problem>

;id: problem identifier
;state: one of enabled, paused, disabled
;label: one letter label
;name: descriptive name
;color: color name, typically used for balloons
;rgb: color rgb value

==== Team Element ====

 <team id="1" external-id="23412">
   <name>American University of Beirut</name>
   <nationality>LBN</nationality>
   <university>American University of Beirut</university> 
   <group>Europe</group> 
 </team>

;id: team identifier. from [[Contest_Control_System#teams.tsv|teams.tsv (team ID)]] 
;external-id: external team id from [[Contest_Control_System#teams.tsv|teams.tsv (External ID)]] 
;name: team name from [[Contest_Control_System#teams.tsv|teams.tsv]]
;nationality: nationality as ISO 3166-1 alpha-3, from [[Contest_Control_System#teams.tsv|teams.tsv]]
;university: university affiliation, from [[Contest_Control_System#teams.tsv|teams.tsv]]
;group: group name [[Contest_Control_System#groups.tsv | groups.tsv]] from [[Contest_Control_System#teams.tsv|teams.tsv]]

=== Clar Request Event===

The clar-request event is output when a team submits a clarification request.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|id || Clarification Request ID || xsd:int
|-
|team-id || Team ID || xsd:int
|-
|question || A question, typically from a team || xsd:string
|-
|category || Clarification category || xsd:string
|-
|contest-time || Contest (elapsed) time when the clarification was submitted || xsd:decimal
|-
|timestamp || Wall-clock time when the clarification was submitted || xsd:decimal
|}

Example:

 <clar-request id="1" team-id="0" problem-id="1">
   <question>What is the upper limit on the number of pieces of chocolate requested by the friends?</question>
   <category>Problem C</category>
   <contest-time>118.48</contest-time>
   <timestamp>1265335256.74</timestamp>
 </clar-request>

=== Clar Response Event===

The clar response event is sent when a clar request has been answered.

Format:

{| class="wikitable"
! Name !! Description !! Type
|-
|clar-request-id || Clarification Request ID || xsd:int
|-
|answer || Judge's answer to the question || xsd:string
|-
|to-all || True if the response was sent to all teams || xsd:boolean
|-
|contest-time || Contest (elapsed) time when the response was submitted || xsd:decimal
|-
|timestamp || Wall-clock time when the response was submitted || xsd:decimal
|}

Example:

 <clar-response clar-id="1">
   <answer>The number of pieces will fit in a signed 32-bit integer.</answer>
   <to-all>true</to-all>
   <contest-time>118.48</contest-time>
   <timestamp>1265335256.74</timestamp>
 </clar-response>

=== Run Element ===

 <run id="1410" team-id="74" problem-id="4">
   <language>C++</language>
   <contest-time>17960.74</contest-time>
   <timestamp>1265353100.29</timestamp>
 </run>

;id: run identifier
;team-id: team ID
;problem-id: problem ID
;language: language name
;contest-time: official submission time used for scoring
;timestamp: the current computer time when this element was created

=== run-judgement ===

 <run-judgement run-id="1410">
   <judgement>WA</judgement>
   <penalty>true</penalty>
   <contest-time>179.74</contest-time>
   <timestamp>1265353100.29</timestamp>
 </run-judgement>

;id: run identifier
;judgement: judgement acronym
;penalty: penalty flag

=== run-source ===

 <run-source run-id="1410">
   '''TODO define encoding and format for source code, remember to specify main file and other files
 </run-source >

;run-id: id of associated run element

=== Testcase Element ===

 <testcase run-id="1">
   &lt;i>1&lt;/i>
   <n>1</n>
   <judgement>WA</judgement>
   <contest-time>939.75</contest-time>
   <timestamp>1265336078.01</timestamp>
 </testcase>

;run-id: matches id in run element
;i: testcase number
;n: total number of testcases
;judgement: judgement acronym
;contest-time: contest (elapsed) time in minutes 
;timestamp: the current computer time when this element was created

:'''Comment''' Is contest-time when the run was submitted or when the testcase was run ? [[User:Douglas Lane|Douglas Lane]] 19:50, 27 February 2011 (CET)

=== Notification Element ===
'''TODO''': What is supposed to happen if rejudging changes the state of a run from Accepted to Rejected? What is supposed to happen if rejudging changes which run was ''first to solve''.

A notification should be sent the first time a team solves a particular problem. It is not sent for rejected solutions, nor if the team submits another successful solution to the same problem. If a previously accepted run is rejected due to rejudging, no notification is sent.

:'''Comment:''' If a team has solved a problem, then the judges determine that the team has not solved the problem what action is taken? [[User:Douglas Lane|Douglas Lane]] 20:10, 16 May 2011 (CEST)

:'''Comment:''' Is the program that consumes the notifications responsible for tracking which have been send and which have not? [[User:Douglas Lane|Douglas Lane]] 17:06, 20 February 2011 (CET)

 <notification id="214" team-id="34">
  <team>U Waterloo</team>
  <contest-time>132.04</contest-time>
  <timestamp>1298733213.10</timestamp>
  <balloon problem-id="2">
    <label>B</label>
    <name>Bulls and bears</name>
    <color rgb="ff0000">red</color>
  </balloon>
  <first-by-team>true</first-by-team>
  <balloons>
    <!-- balloons that team already has -->
    <balloon problem-id="4">
      <label>D</label>
      <name>Down the hill</name>
      <color rgb="33cc00">green</color>
    </balloon>
    <balloon problem-id="6">
      <label>F</label>
      <name>Failing to make the grade</name>
      <color rgb="ffff00">yellow</color>
    </balloon>
  </balloons>
 </notification>

Sent for each balloon to be printed. Contains:
;id: id of notification, sequential starting at 1 (int)
;team-id: Team's number in contest (1, 2, etc) (int)
;team: Team name (same as or similar to team sign) (string)
;contest-time: minutes since contest started, contest time (float)
;timestamp: the current computer time when this element was created, decimal seconds 
;balloon: balloon info, see balloon element below
;first-in-contest: required only when true (bool)
;first-for-problem: required only when true (bool)
;first-by-team: required only when true (bool)
;balloons: list of balloons team should have (including this balloon)

===== Balloon Element =====
Describes a balloon for a problem
;problem-id: the id of the problem
;label: A, B, etc (character)
;name: name / title of problem (string)
;rgb: 3-byte RGB value encoded in hex (string)
;color: color name (string)

=== reset ===
Sending a <reset/> tells the client to disconnect and reconnect to read the stream from the beginning. A typical reason to send a reset would be the removal of a time interval, requiring update of the contest time for events already issued.

=== Finalized Element ===

Note that the finalized element is followed immediately by a <tt></contest></tt> tag.

 <finalized>
   <last-gold>4</last-gold>
   <last-silver>8</last-silver>
   <last-bronze>12</last-bronze>
   <comment>Finalized by John Doe and Jane Doe</comment>
   <timestamp>1265336078.01</timestamp>
 </finalized>

;timestamp: the current computer time when this element was created 
;last-gold:integer, last place to receive a gold
;last-silver:integer, last place to receive a silver
;last-bronze:integer, last place to receive a bronze
;comment:text
